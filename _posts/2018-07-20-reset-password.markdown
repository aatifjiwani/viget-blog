---
layout: post
title:  More Work
date:   2018-07-20
category: seventh
comments: true
---

Unlike yesterday where I only developed the iOS app for the group project, I actually did a lot of work in terms of the mobile and web app. For the mobile app, I've been making enormous strides. Today, I was able to adjust the launch screen to be seamless when the app laods as well as get the header in order. Also, I've been able to make it to where if you press the 'Log in' button, the Log in modal pops up in the middle of the screen. I know that doesn't sound like a lot but it took so long to code everything. I know, I know, some people who might read this will say use storyboards. But if you checked out yesterday's post, I already said I hate storyboards and I will never, ever, ever, ever use it again unless I really have to. In this case, I don't have to so I won't use storyboards. 

In terms of the Rails app, I ran into quite a few problems. Peyton implemented the Reset Password modal recently so now it is my turn to go in and do all the backend for that stuff. The first thing I realized was that I had to override the Passwords controller from Devise and I remember from overriding the Sessions and Registrations controller that that was a pain in the butt. Overriding the `update` action wasn't too hard as it was pretty straightforward but the `create` action was a whole new doozy. Devise has it so that when you create a reset password session, you get two tokens. One long one, and one short one. The long one is stored in the database and the short one is emailed to you so you don't have to click a long link. But a weird thing is is that if you don't have the right token, Devise STILL leads you to the password edit page which is not what we want. SO, I had to figure out how the heck Devise creates a reset password token and I have to check whether or not that token is in the DB. This took a while because I had to dig through parts of the gem to get the function I wanted. When I was able to, I finally made it so that the user had to use a proper link otherwise the session wouldn't work. 

The next part that I struggled with was writing the tests. Devise doesn't really keep track of the token and you can't reproduce the token with the encryption functions they have. So I had to do some research and I came across a gem called `email-spec`. This allows me to look at all the emails that have been sent an inspect their body. This wasn't super hard to implement but one thing I realized is that Devise sends your email immediately, which takes the app a while to process. This isn't good because RSpec doesn't give a flying crap about long processes, it just executes the test as fast as possible. This isn't good because my tests kept failing because it couldn't find an email being sent but if it WAITED like a half second, it would see the pending email. So I have a hacky solution in place where you can run `sleep(inspection_time: ...)` and it pauses the test for the specified time in seconds. I don't know if this is the proper way to do this but it was a way I found that worked. I'll just have to come in on Monday and see the comments on my PR. 

See ya Monday!!