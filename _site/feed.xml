<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-06-22T09:03:48-06:00</updated><id>http://localhost:4000/</id><title type="html">Jiwani | Viget Blog 2018</title><subtitle>This is a blog created for my 2018 Viget Internship as their Rails Developer intern. </subtitle><entry><title type="html">You Can Vote!</title><link href="http://localhost:4000/third/2018/06/21/now-you-can-vote.html" rel="alternate" type="text/html" title="You Can Vote!" /><published>2018-06-21T00:00:00-06:00</published><updated>2018-06-21T00:00:00-06:00</updated><id>http://localhost:4000/third/2018/06/21/now-you-can-vote</id><content type="html" xml:base="http://localhost:4000/third/2018/06/21/now-you-can-vote.html">&lt;p&gt;Ahh, today was a much better day. I didn’t struggle as much as I did yesterday but I still was challenged as I was expecting. 
Today, I worked on implementing the voting scheme on just the articles. In order to do that, I had to learn about ajax and how you can assign
background tasks, essentially, within your app. At first it was pretty hard because I was just trying to learn from the internet. But turns out, I didn’t have the right resources. All the things I was looking at rendered a javascript file after a remote link is clicked but that javascript never did anything. 
Nothing was working!!!!&lt;/p&gt;

&lt;p&gt;So I talked to Eli and he told me another way to do it. Instead of doing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#controller.rb&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;respond_to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;js&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I did:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#controller.rb&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;key: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And this would send the browser a response with a hash. In order to retrieve that response, you need to bind the link to an ajax callback method. For getting the response after successful execution, you should run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#button'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ajax:success'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//the response is in the 'evt' parameter&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'detail'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//do stuff with the response. &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Also, Patrick gave me guidance to how I should create a vote model to keep track of all the votes any user has made on any article. This would help ensure that no user can vote the same value multiple times. I still have yet to implement a feature where the user can take back their vote if they accidentally clicked something. But that’s fore later, let’s just get the core functionality down.&lt;/p&gt;</content><author><name></name></author><category term="third" /><summary type="html">Ahh, today was a much better day. I didn’t struggle as much as I did yesterday but I still was challenged as I was expecting. Today, I worked on implementing the voting scheme on just the articles. In order to do that, I had to learn about ajax and how you can assign background tasks, essentially, within your app. At first it was pretty hard because I was just trying to learn from the internet. But turns out, I didn’t have the right resources. All the things I was looking at rendered a javascript file after a remote link is clicked but that javascript never did anything. Nothing was working!!!!</summary></entry><entry><title type="html">Another Hard Day.</title><link href="http://localhost:4000/third/2018/06/20/another-hard-day.html" rel="alternate" type="text/html" title="Another Hard Day." /><published>2018-06-20T00:00:00-06:00</published><updated>2018-06-20T00:00:00-06:00</updated><id>http://localhost:4000/third/2018/06/20/another-hard-day</id><content type="html" xml:base="http://localhost:4000/third/2018/06/20/another-hard-day.html">&lt;p&gt;Not gonna lie but today was pretty challenging. I finished up the comments feature and now it was time to write some tests, both model and feature.&lt;/p&gt;

&lt;p&gt;The model specs were not that hard actually. They were pretty simple and not too challenging.&lt;/p&gt;

&lt;p&gt;However, the real doozy came down to the feature specs. At first, I thought it was going to be pretty simple like the model specs but I was WRONG. One thing I forgot about Capybara is that it doesn’t fricken render the javascript. That’s a problem because in order to reply to another comment, I use javascript to make the textarea appear when a button is clicked so the page isn’t littered with like tons of big textarea boxes. So, I had to figure out how the heck I was going to render javascript. At first, my methods didn’t work so I had to ask Eli. Eli recommended using the &lt;code class=&quot;highlighter-rouge&quot;&gt;chromedriver-helper&lt;/code&gt; gem and he gave me the configuration he used for it. But, my tests were still not working. It wasn’t finding elements that were CLEARLY on the page and I had no idea wtf was going on.&lt;/p&gt;

&lt;p&gt;After about a half-hour or so, Eli and I figured it out but then I ran into another problem. When the javascript renders, so does the CKEditor textareas. This is a problem because using the plain &lt;code class=&quot;highlighter-rouge&quot;&gt;fill_in &quot;Label&quot;, with: &quot;Content&quot;&lt;/code&gt; command wasn’t working anymore because it wasn’t finding the textbox. Sooooo, I had to figure out how to enter text within the CKEditor textarea and that took a whole-nother gosh darn hour.&lt;/p&gt;

&lt;p&gt;After that, I ran into another problem. The &lt;a&gt; element that when clicked renders the textarea wasn’t showing as a clickable link through Capybara. This was because I didn’t define a href attribute which I guess is necessary. When I set the href to #, my javascript was messing up because the page kept reloading and resetting the textboxes. So after digging around the internet, apparently you can define href to be &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript:void(0)&lt;/code&gt; and clicking the &lt;a&gt; tag does absolutely nothing!!!!!!&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once figuring all that out, I got my feature specs to work and now all my tests pass. YAY! But despite that, these problems hurt my brain and I had to dig around Google for so long because it is rare that people come across the type of problems I have.&lt;/p&gt;

&lt;p&gt;Tomorrow, I am going to finalize my blog and start working on the Week 4 specs which is the ability to upvote/downvote articles and filter the articles based on whatever the user chooses.&lt;/p&gt;</content><author><name></name></author><category term="third" /><summary type="html">Not gonna lie but today was pretty challenging. I finished up the comments feature and now it was time to write some tests, both model and feature.</summary></entry><entry><title type="html">I’m Exhausted</title><link href="http://localhost:4000/third/2018/06/19/agh-im-tired.html" rel="alternate" type="text/html" title="I'm Exhausted" /><published>2018-06-19T00:00:00-06:00</published><updated>2018-06-19T00:00:00-06:00</updated><id>http://localhost:4000/third/2018/06/19/agh-im-tired</id><content type="html" xml:base="http://localhost:4000/third/2018/06/19/agh-im-tired.html">&lt;p&gt;Holy moly what an exhausting day I just had.&lt;/p&gt;

&lt;p&gt;First, I started working on a blog for Viget that explained how Rails 5.2 stored secret credentials in a different way than previous versions. I sent the finished blog to be looked over by 3 devs and a writer to look over and there were a lot of comments haha. Not that I don’t mind but it just reinforces that thankfully I am not a writer myself. I’ve always been pretty bad at writing good sentence structures and that stuff but hurray, I’m a software developer so it doesn’t matter a whole lot.&lt;/p&gt;

&lt;p&gt;Next, I started working on implementing comments on articles. Eli’s Haxxor News specs said that comments could be nested within eachother and there really is not a limit to how deep the layers go. This was really confusing at first and I knew right off the bat that I couldn’t simply use ‘has_many’ and ‘belongs_to’ because a comment could belong to either a post or an article, you won’t know which. So today, I learned about polymorphism and that concept is how you attack the idea that comments could belong to other comments or an article. It’s actually pretty sweet that you could do that and I’m kinda interested in the other kind of manipulations you can do with models.&lt;/p&gt;

&lt;p&gt;After I figured out polymorphism, I actually had to embed the functionality within my html code. Now that was a real pain in the booty. As of this moment, it took me almost 3 hours just to design the page that allowed adding comments. A part of the three hours were spent trying to figure out why CKEditor was being stupid and wasn’t creating a formatting toolbar on my textareas. While trying to figure out a solution, I found out that CKEdtior, the library that creates the formatting toolbar, actually has a rails gem that I could use. So instead of using a script to replace the textareas, I could just use:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= form.cktext_area :body, class: 'blah', ckeditor: {ui_color: #123456,...}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where I could configure the textarea box using a hash of options, as kinda highlighted above. Although this seems awesome, this took me like fricken 2 hours to figure out because there’s just so much that you need to do in order to get the rails gem to actually work.&lt;/p&gt;

&lt;p&gt;Then, it took me another hour or so to design the comments area and that was kinda also a pain in the booty because I wanted to go a little farther and have cool user interaction where you could choose to reply to a comment and a textarea will show up. The javascript was pretty simple but just organizing everything was pretty exhausting.&lt;/p&gt;

&lt;p&gt;Tomorrow, I’m going to continue to work on the comments feature. I still have to write tests to make sure that everything works the way it is meant to be without going in and doing QA tests.&lt;/p&gt;</content><author><name></name></author><category term="third" /><summary type="html">Holy moly what an exhausting day I just had.</summary></entry><entry><title type="html">Whew, I did it.</title><link href="http://localhost:4000/third/2018/06/18/whew.html" rel="alternate" type="text/html" title="Whew, I did it." /><published>2018-06-18T00:00:00-06:00</published><updated>2018-06-18T00:00:00-06:00</updated><id>http://localhost:4000/third/2018/06/18/whew</id><content type="html" xml:base="http://localhost:4000/third/2018/06/18/whew.html">&lt;p&gt;Dang, it’s my third week already here at Viget. Time really flies by.&lt;/p&gt;

&lt;p&gt;Today, I did a lot in terms of fixing some stuff in my pull requests (Thanks Eli and David!)&lt;/p&gt;

&lt;p&gt;For my first pull request, which was the branch that managed password resets, I fixed a lot of security issues. I learned that some people aren’t stupid and could inspect my html and see some hidden fields. For some context, I had the user id stored in a hidden field on my html so I could reference it when I wanted to update the user’s password. Now, I fixed it to be where I stored the user in a session variable and then destroyed it once the user has successfully reset their password. Then, there was an issue where I had the password token for each user be unique and if I regenerated the password token, the app could crash because the regenerated password token matched another user. I fixed this issue to make it so the password token is NOT unique but the reset password url contains the user’s email for extra validation. Finally, I fixed an issue where I put my gmail account’s unique app password in my commit (which can be apparently used to hack into my gmail, whoops) but now the password is stored in the encrypted credentials file.&lt;/p&gt;

&lt;p&gt;For my second and final PR, which was user-post interaction, I fixed some small thingss. These fixes are mainly efficiency fixes and being able to handle future complexity. I made some logical changes where some methods are stored in different areas and accessed differently.&lt;/p&gt;

&lt;p&gt;After all that was done, I had to push everything to Heroku. This may seem like a non-daunting task but I didn’t push anything to Heroku since I created my article model. So my app didn’t have any user functionality yet. When I pushed my changes to Heroku, a couple things happened. My heroku master branch was apparently a commit ahead of my local branch so I had to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heroku&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, there was apparently a syntax error in my javascript file but oddly enough, the error log didn’t really specifty that. It instead said:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Uglifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Unexpected&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;token: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;punc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;To&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ES6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;harmony&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;must&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Uglifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:harmony&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Lol it’s kinda funny that the class name is Uglifier. That’s hilarious lmfao. But that error apparently means that there’s something wrong with my javascript, specifically the javascript that implemented the formatting toolbar. Thankfully, I figured it out and fixed the issue.&lt;/p&gt;

&lt;p&gt;With a miracle, my app compiled correctly and everything works! I added a article model spec because I had a silly error where I didn’t account for a nil user when checking who the parent of the article was.&lt;/p&gt;

&lt;p&gt;With my remaining time for the day, I am going to add a comment controller as well as a model. I will prolly continue with this tomorrow as well.&lt;/p&gt;</content><author><name></name></author><category term="third" /><summary type="html">Dang, it’s my third week already here at Viget. Time really flies by.</summary></entry><entry><title type="html">A New Feature</title><link href="http://localhost:4000/second/2018/06/15/a-new-feature.html" rel="alternate" type="text/html" title="A New Feature" /><published>2018-06-15T00:00:00-06:00</published><updated>2018-06-15T00:00:00-06:00</updated><id>http://localhost:4000/second/2018/06/15/a-new-feature</id><content type="html" xml:base="http://localhost:4000/second/2018/06/15/a-new-feature.html">&lt;p&gt;As the second week of my Viget internship comes to a close, I’ve been able to successfully add a pretty sweet feature that seems mediocre to other people: resetting a password.&lt;/p&gt;

&lt;p&gt;In this process, I learned that it’s important to stay away from creating custom routes and instead create a separate controller to handle CRUD actions, even if it doesn’t have a model associated with it. I had to create a PasswordReset controller which had the new, create, edit, and update actions to handle a user wanting to reset their password.&lt;/p&gt;

&lt;p&gt;Also, Rails has a nifty thing that allows you to regenerate password tokens so someone doesn’t purposely change someone’s password by guessing the proper token. Simply make sure that you add:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;has_secure_token&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;whatever&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;called&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;into the proper model.&lt;/p&gt;

&lt;p&gt;Also, I learned how to properly configure Active Mailer. There’s actually a separate kinda controller that handle’s all the mailing functions. Also, for your and my reference, again, this is how a sample config should look if you’re using gmail to send your email.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;raise_delivery_errors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_deliveries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delivery_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:smtp&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SMTP settings for gmail&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;smtp_settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:address&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;smtp.gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:port&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;587&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:user_name&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nflkiddo.productions@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:mail_pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:authentication&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;plain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:enable_starttls_auto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_caching&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default_url_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;host: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost:3000&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My password isn’t actually that jumbled mess but instead an app password. If you want to hack into my email, by all means go ahead. I haven’t used that email in such a long time and only still exists as kinda a burner email where bots or people can send unwanted emails there.&lt;/p&gt;

&lt;p&gt;Otherwise, that’s it for today! I’ve successfully written feature specs for resetting a password and it all passes! Ahhhh that’s relieving.&lt;/p&gt;</content><author><name></name></author><category term="second" /><summary type="html">As the second week of my Viget internship comes to a close, I’ve been able to successfully add a pretty sweet feature that seems mediocre to other people: resetting a password.</summary></entry><entry><title type="html">I Found a Cool New Thing</title><link href="http://localhost:4000/second/2018/06/14/i-found-a-cool-thing.html" rel="alternate" type="text/html" title="I Found a Cool New Thing" /><published>2018-06-14T00:00:00-06:00</published><updated>2018-06-14T00:00:00-06:00</updated><id>http://localhost:4000/second/2018/06/14/i-found-a-cool-thing</id><content type="html" xml:base="http://localhost:4000/second/2018/06/14/i-found-a-cool-thing.html">&lt;p&gt;Heyo, today was pretty productive. I was able to figure out how to link users to posts and make that relational functionality work. Now, my app allows visitors to sign up, login and create a post. Also, I’ve added functionality that prevents visitors from creating posts and prevents users from deleting posts that are not there.&lt;/p&gt;

&lt;p&gt;Also, I changed the way my Active Storage credentials are stored. Instead of having them stored in a .json file in another folder, Rails 5.2 has a new, unique way to do it. Unlike Rails 5.1 and below, you had to store your credentials in a file called secret.yml. Now, Rails secrets is deprecated in 5.2 and instead, credentials are stored in an encrypted file called credentials.yml.enc.&lt;/p&gt;

&lt;p&gt;I am going to post a Viget blog all about this but for your and my reference, this is how it goes. To start fresh, delete the credentials.yml.enc and master.key file in your config/ folder. Then, in a command line interface, write&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;EDITOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'subl --wait'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:edit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The reason there we are setting ‘EDITOR’ to a specific text editor is because when you run the credentials:edit command, Rails opens up the decrypted credentials file in the specified text editor. This way, you can quickly add/edit/delete any credentials, save, and quit the editor and Rails will automatically re-encrypt the credentials file. It’s actually pretty sweet.&lt;/p&gt;

&lt;p&gt;Also, DO NOT remove master.key. Rails automatically adds this file in .gitignore so it isn’t going to be pushed to a repo but this file contains the decryption key for your credentials. So whatever you do, don’t lose it.&lt;/p&gt;

&lt;p&gt;If you’re deploying your app via Heroku, you can add a config variable named RAILS_MASTER_KEY and set it equal to the decryption key.&lt;/p&gt;

&lt;p&gt;And that’s it for today!&lt;/p&gt;</content><author><name></name></author><category term="second" /><summary type="html">Heyo, today was pretty productive. I was able to figure out how to link users to posts and make that relational functionality work. Now, my app allows visitors to sign up, login and create a post. Also, I’ve added functionality that prevents visitors from creating posts and prevents users from deleting posts that are not there.</summary></entry><entry><title type="html">Today I Struggled…</title><link href="http://localhost:4000/second/2018/06/13/today-was-hard.html" rel="alternate" type="text/html" title="Today I Struggled..." /><published>2018-06-13T00:00:00-06:00</published><updated>2018-06-13T00:00:00-06:00</updated><id>http://localhost:4000/second/2018/06/13/today-was-hard</id><content type="html" xml:base="http://localhost:4000/second/2018/06/13/today-was-hard.html">&lt;p&gt;Today was hard holy cow. I started and finished working on user creation and authentication and boi was that hard.&lt;/p&gt;

&lt;p&gt;In terms of user creation, it wasn’t hard to setup the front-end and make sure that my form submits properly. However, when it came to user authentication, that’s when stuff got real hard.&lt;/p&gt;

&lt;p&gt;I ran into a lot of problems when trying to figure out password encryption. I used the bcrypt gem, which is what Viget uses in their rails apps, and the guide I was using was absolute trash. It did not go over how to decrypt the password once it was encrypted and stored into the database.&lt;/p&gt;

&lt;p&gt;Once I ran into that problem, I had to pretty much start all over. I had to change the user table schema because apparently bcrypt needs a column labeled ‘password_digest’. This was NOT expressed in the guide I was using before. I also had to import certain methods that bcrypt uses to automatically authenticate a user when given the right password.&lt;/p&gt;

&lt;p&gt;Then, I had to create a session controller which was kinda tricky because it doesn’t necessarily have a model associated with it. So everytime you go to a new route, it does nothing with my db. All it does it simply keep track of the user ID in the session hash that is bundled up into a cookie that is brought to every page you navigate to.&lt;/p&gt;

&lt;p&gt;After all that, I decided to install FactoryBot which was another challenge on its own. There were a lot of configurations that I had to add to certain files which kinda confused the living heck outta me. But finally, I figured it out and FactoryBot got installed.&lt;/p&gt;</content><author><name></name></author><category term="second" /><summary type="html">Today was hard holy cow. I started and finished working on user creation and authentication and boi was that hard.</summary></entry><entry><title type="html">Made It Even Better!</title><link href="http://localhost:4000/second/2018/06/12/heck-yeah-boi.html" rel="alternate" type="text/html" title="Made It Even Better!" /><published>2018-06-12T00:00:00-06:00</published><updated>2018-06-12T00:00:00-06:00</updated><id>http://localhost:4000/second/2018/06/12/heck-yeah-boi</id><content type="html" xml:base="http://localhost:4000/second/2018/06/12/heck-yeah-boi.html">&lt;p&gt;Yesterday after I posted the blog for June 11, I started experimenting with Active Storage for RoR. When I first started to dig into it all, it was hella confusing. I didn’t even know where to start. But thankfully I pushed through and this is what I did:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;
        &lt;p&gt;Created a free Google Cloud account&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;Created a project and a storage bucket for Haxxor News&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;Installed the Active Storage tables needed for Ruby on Rails to know what is currently being stored and where&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;Configured storage.yml to say that GCS is an usable storage location&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;Added &quot;has_attached&quot; to the Articles model to allow attachments to every article (Just one image)&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;Launched the app locally and prayed that it worked....it did!&lt;/p&gt;
    &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So that was really fun. Another cool thing that I figured out how to do today was add a formatting toolbar to the textarea element when creating a new article. For your reference and my future reference for what I did, I first added a script tag in the head to import the .js code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--  @source https://cdn.ckeditor.com/#ckeditor5 
Add code to application.html.erb --&amp;gt;&lt;/span&gt;   
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.ckeditor.com/ckeditor5/10.0.1/classic/ckeditor.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then, when needed, I had to add a script that replaced the textarea element with their CKEditor5 replacement to add the formatting toolbar:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- The form is generated from rail's form_for form generator  --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text_area&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:body&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;textarea-field&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;',&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!--  @source https://cdn.ckeditor.com/#ckeditor5 
Add code wherever the formatting toolbar is desired --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ClassicEditor&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#editor'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;toolbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'heading'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'|'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bold'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'italic'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bulletedList'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'numberedList'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'link'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'blockQuote'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that’s it! Now you’ll be able to see a formatting toolbar on your textarea element. But something to note is that if you have specific styling for that textarea without the formatting toolbar, you will have to move that styling to apply to the new, replaced textarea element if that makes sense.&lt;/p&gt;

&lt;p&gt;On another note, I started doing testing for my Haxxor News application which is kinda neat. The capybara gem is flippin genius and I want to shake the hand of whoever created it.&lt;/p&gt;

&lt;p&gt;After all that’s been finished, I’ve been working on making sure that every feature I’ve added looks good or works properly. Now that I am close to finishing the current feature of active storage keeping, I am a little confused on whether or not I should move onto user authentication without finishing all the pull requests I’ve generated. I honestly don’t want to go through the hassle of rebasing or cherry-picking but if it has to be done, it has to be done.&lt;/p&gt;

&lt;p&gt;That’s all for today! I know this was long so if you made it to this point, congrats!&lt;/p&gt;</content><author><name></name></author><category term="second" /><summary type="html">Yesterday after I posted the blog for June 11, I started experimenting with Active Storage for RoR. When I first started to dig into it all, it was hella confusing. I didn’t even know where to start. But thankfully I pushed through and this is what I did:</summary></entry><entry><title type="html">Got A Lot Done!</title><link href="http://localhost:4000/second/2018/06/11/week1-dev-done.html" rel="alternate" type="text/html" title="Got A Lot Done!" /><published>2018-06-11T00:00:00-06:00</published><updated>2018-06-11T00:00:00-06:00</updated><id>http://localhost:4000/second/2018/06/11/week1-dev-done</id><content type="html" xml:base="http://localhost:4000/second/2018/06/11/week1-dev-done.html">&lt;p&gt;Ahh, today was pretty relaxed compared to last week. I didn’t have a crap-ton of meetings to go to which was nice. 
Today, I learned quite a bit more about Ruby on Rails and Heroku. When you migrate your database locally, apparently heroku does
not detect the changes. So you need to tell heroku to migrate the db on their server or something which is weird.&lt;/p&gt;

&lt;p&gt;Also, I made hella progress with Haxxor News. Eli assigned me the task to allow visitors to create a new article and view the most recently posted articles for the first week. I finished pretty much both of those tasks today which I’m pretty proud of. It was supposed to take a week but I got it done pretty fast. However, I’m not necessarily done. I want visitors to be able to add more content to their article rather than just a simple title and body. Maybe I’ll figure out how users can add images to the article and also some other stuff I need to figure out.&lt;/p&gt;

&lt;p&gt;In other news, I taught Eli how to play Fortnite lol:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/IMG_0318.jpg&quot; alt=&quot;Eli playing fortnite&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="second" /><summary type="html">Ahh, today was pretty relaxed compared to last week. I didn’t have a crap-ton of meetings to go to which was nice. Today, I learned quite a bit more about Ruby on Rails and Heroku. When you migrate your database locally, apparently heroku does not detect the changes. So you need to tell heroku to migrate the db on their server or something which is weird.</summary></entry><entry><title type="html">Started A New Project!</title><link href="http://localhost:4000/first/2018/06/08/finished-blog.html" rel="alternate" type="text/html" title="Started A New Project!" /><published>2018-06-08T00:00:00-06:00</published><updated>2018-06-08T00:00:00-06:00</updated><id>http://localhost:4000/first/2018/06/08/finished-blog</id><content type="html" xml:base="http://localhost:4000/first/2018/06/08/finished-blog.html">&lt;p&gt;Today I finished my blog in its entirety (if that’s spelled correctly). I’ve added a photo of myself to the about page to add some more pizzaz.&lt;/p&gt;

&lt;p&gt;Now, I have a new project. Yay!! I get to build a recreation of &lt;a href=&quot;http://news.ycombinator.com&quot;&gt; Hacker News&lt;/a&gt; which is pretty sweet. I started to work on deploying the app and getting the preliminary design of the home page finished.&lt;/p&gt;

&lt;p&gt;Whilst doing so, I learnt a couple things. First, Heroku is a PAIN IN THE ASS!!!!!! Just trying to deploy the app on Heroku took like an hour or so because I was getting so many errors. There is just so many things you have to configure before your app is working successfully on Heroku.&lt;/p&gt;

&lt;p&gt;Next, I learnt more things about Ruby on Rails. I figured out (with the help of Eli) that each HTML page is actually a template that is passed into the application.html.erb file. I also learned that in the application controller, you can write:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_method&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;helper_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:some_method&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and you can use the given method inside your view. That’s so cool!!&lt;/p&gt;

&lt;p&gt;Tomorrow, I am going to work on creating a model for the posts and allowing visitors to be able to create and view a list of the most recent posts.&lt;/p&gt;

&lt;p&gt;See ya tomorrow!!&lt;/p&gt;</content><author><name></name></author><category term="first" /><summary type="html">Today I finished my blog in its entirety (if that’s spelled correctly). I’ve added a photo of myself to the about page to add some more pizzaz.</summary></entry></feed>