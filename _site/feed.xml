<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-06-28T16:41:03-06:00</updated><id>http://localhost:4000/</id><title type="html">Jiwani | Viget Blog 2018</title><subtitle>This is a blog created for my 2018 Viget Internship as their Rails Developer intern. </subtitle><entry><title type="html">OAuth is One of its Kind</title><link href="http://localhost:4000/fourth/2018/06/28/oauth.html" rel="alternate" type="text/html" title="OAuth is One of its Kind" /><published>2018-06-28T00:00:00-06:00</published><updated>2018-06-28T00:00:00-06:00</updated><id>http://localhost:4000/fourth/2018/06/28/oauth</id><content type="html" xml:base="http://localhost:4000/fourth/2018/06/28/oauth.html">&lt;p&gt;Boy oh boy, have I had a wild day. Today, I tried getting a user to be able to sign in and create an account with Facebook. I came across a load of problems that kinda confused me. The first one was that when I create a user from Facebook, I can’t really give them a password because it can cause confusion and pose a security risk. Therefore, the &lt;code class=&quot;highlighter-rouge&quot;&gt;password_digest&lt;/code&gt; column in the user model is &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; for that user. This causes problems because the user model validates the password, for presence and confirmation, automatically with the tag &lt;code class=&quot;highlighter-rouge&quot;&gt;has_secure_token&lt;/code&gt;. So then, I had to figure out how to bypass all those validations and I did that by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;has_secure_password validations:false&lt;/code&gt; and then manually adding my own validations to run under certain conditions. This caused another problem because if the &lt;code class=&quot;highlighter-rouge&quot;&gt;password_digest&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;, BCrypt throws an error saying it can’t read the password because it’s blank. This forced me to think about an alternate solution where I had to create a new model called &lt;code class=&quot;highlighter-rouge&quot;&gt;OAuthUsers&lt;/code&gt; that properly stored which users created used external services. So, when a FB user tries to sign in manually, I have to check whether or not their username is stored in the &lt;code class=&quot;highlighter-rouge&quot;&gt;OAuthUsers&lt;/code&gt; model and alert them that they need to sign in via their provided service.&lt;/p&gt;

&lt;p&gt;Besides OAuth, I made some changes to the group project and tried to rebase my feature branch with Peyton’s old feature branch. In order to do this, I needed to rebase my branch onto Peyton’s branch but this caused so much confusion. When I rebased, fixed the merge, and tried to push the changes to the respective branch, I would get an error saying that I need to &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull..&lt;/code&gt; before I could do anything. When I did that, it would give me more merge errors, which I fixed. From there, honestly I don’t know what happened but I rebased accidentally multiple times because I thought the rebase wasn’t working at all. So I ended up creating like 10-12 false commits which isn’t good because it makes it harder to find the right commit with the right changes. So tomorrow or before end of day today, I need to ask Eli for help on how to properly rebase again so I don’t screw up in the future.&lt;/p&gt;

&lt;p&gt;Tomorrow, I’m going to add OAuth feature specs for FB and hopefully that goes smoothly.&lt;/p&gt;</content><author><name></name></author><category term="fourth" /><summary type="html">Boy oh boy, have I had a wild day. Today, I tried getting a user to be able to sign in and create an account with Facebook. I came across a load of problems that kinda confused me. The first one was that when I create a user from Facebook, I can’t really give them a password because it can cause confusion and pose a security risk. Therefore, the password_digest column in the user model is nil for that user. This causes problems because the user model validates the password, for presence and confirmation, automatically with the tag has_secure_token. So then, I had to figure out how to bypass all those validations and I did that by setting has_secure_password validations:false and then manually adding my own validations to run under certain conditions. This caused another problem because if the password_digest is set to nil, BCrypt throws an error saying it can’t read the password because it’s blank. This forced me to think about an alternate solution where I had to create a new model called OAuthUsers that properly stored which users created used external services. So, when a FB user tries to sign in manually, I have to check whether or not their username is stored in the OAuthUsers model and alert them that they need to sign in via their provided service.</summary></entry><entry><title type="html">APIs</title><link href="http://localhost:4000/fourth/2018/06/27/apis.html" rel="alternate" type="text/html" title="APIs" /><published>2018-06-27T00:00:00-06:00</published><updated>2018-06-27T00:00:00-06:00</updated><id>http://localhost:4000/fourth/2018/06/27/apis</id><content type="html" xml:base="http://localhost:4000/fourth/2018/06/27/apis.html">&lt;p&gt;So today after I finished addressing the comments on my PR, I started working on interacting with APIs. The only one that I really wanted to include was a geolocation API so that when users sign up or create a post, they can choose to have a location attached to it. From there, the API gets the location from the IP address where the request was from and it’ll attach the location to the model.&lt;/p&gt;

&lt;p&gt;I also interacted with the Google Map Static API where I can get an image of the location from Google Maps when given a set of lat/lon. This was pretty easy and honestly, I didn’t run into many problems I couldn’t solve on my own.&lt;/p&gt;

&lt;p&gt;However, that all changes with OAuth. To take my app to the next step, I started to implement OAuth2 so users could, for now, sign in with Facebook instead of natively through the app. This was a serious pain because there were so many problems I encountered. The first one was that the gem itself had a bug that incorrectly raised an error because it couldn’t find FB’s access token, but it was clearly there. The solution to that problem was simply updating the gem but I don’t know why it wasn’t up to date when I first installed it.&lt;/p&gt;

&lt;p&gt;Then, in order to get more information about the Facebook user, you have to fricken make a request to FB and prove to them you aren’t doing any malicious things to expose the user. I haven’t done this yet because it’ll take too much time and that’s time that I don’t have now that the group intern project is starting to pertain to me and my department.&lt;/p&gt;

&lt;p&gt;Tomorrow, I’m just going to continue working on OAuth and hopefully it works.&lt;/p&gt;</content><author><name></name></author><category term="fourth" /><summary type="html">So today after I finished addressing the comments on my PR, I started working on interacting with APIs. The only one that I really wanted to include was a geolocation API so that when users sign up or create a post, they can choose to have a location attached to it. From there, the API gets the location from the IP address where the request was from and it’ll attach the location to the model.</summary></entry><entry><title type="html">Donneeee</title><link href="http://localhost:4000/fourth/2018/06/26/doneeeee.html" rel="alternate" type="text/html" title="Donneeee" /><published>2018-06-26T00:00:00-06:00</published><updated>2018-06-26T00:00:00-06:00</updated><id>http://localhost:4000/fourth/2018/06/26/doneeeee</id><content type="html" xml:base="http://localhost:4000/fourth/2018/06/26/doneeeee.html">&lt;p&gt;Today was another pretty dope day. I finished addressing the comments on my filter article PR and I finished adding in a profile page for users. I ran into a couple silly problems because I accidentally made the suggested changes for the PR on my &lt;code class=&quot;highlighter-rouge&quot;&gt;user-profile&lt;/code&gt; branch which was a no-no. So I had to mentally figure out which modified files should be committed to the &lt;code class=&quot;highlighter-rouge&quot;&gt;filter-article&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;user-profile&lt;/code&gt; branches.&lt;/p&gt;

&lt;p&gt;In terms of the user profile page, I had a lot of fun with it. I was able to style it pretty darn well and I added a sweet animation that allows you to see the different articles you’ve posted as well as the articles you’ve voted on. I did run into an issue where if I voted on an article in the “Your Articles” tab, the vote count of that article would not update in the “Your Votes” tab. So I had to completely rethink how I updated those elements with javascript. Luckily, I learned that you can assemble an array of HTML elements with the same class name using:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementByClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;class-name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I used this method to be able to scan for the vote-count elements for the same article, hidden or not, and update the respective vote count. Then, I was able to easily write a user-profile spec and everything passes!!!&lt;/p&gt;

&lt;p&gt;Now, I kinda finished everything that Eli gave me to do and so I am going to ask him for some ideas of what else I should implement.&lt;/p&gt;

&lt;p&gt;That’s it for today!&lt;/p&gt;</content><author><name></name></author><category term="fourth" /><summary type="html">Today was another pretty dope day. I finished addressing the comments on my filter article PR and I finished adding in a profile page for users. I ran into a couple silly problems because I accidentally made the suggested changes for the PR on my user-profile branch which was a no-no. So I had to mentally figure out which modified files should be committed to the filter-article or user-profile branches.</summary></entry><entry><title type="html">Bonus Spec</title><link href="http://localhost:4000/fourth/2018/06/25/bonus-spec.html" rel="alternate" type="text/html" title="Bonus Spec" /><published>2018-06-25T00:00:00-06:00</published><updated>2018-06-25T00:00:00-06:00</updated><id>http://localhost:4000/fourth/2018/06/25/bonus-spec</id><content type="html" xml:base="http://localhost:4000/fourth/2018/06/25/bonus-spec.html">&lt;p&gt;Today was a pretty sweet day! I got a lot of feedback on my PR which was really good because it made me think about the various problems or security vulnerabilities there may be. I also learned that it is good to put logic in templates and use querying stuff in helper methods so it reduces the chance of someone finding out how the app functions (without looking at the GitHub lol).&lt;/p&gt;

&lt;p&gt;Then, today I also worked on getting the home page to filter articles based on how high its been rated within the past year, month, day, or all-time. Originally, I was just going to use ajax in order to re-filter the current list of articles asynchronously but Eli gave me a better, more logical, and ultimately easier way of doing it. I just simply send a GET request to the index action of the Article controller with a parameter of how I want to filter the articles. Then, I just check that the parameter is there and perform some actions on the Vote model.&lt;/p&gt;

&lt;p&gt;I also learned about scope which is how I perform the databse queries to get the highest rated articles of a given time period. It took a lot of thinking honestly and I still don’t believe I have the best way of doing it. But, so far everything works and I’m about done with doing the testing.&lt;/p&gt;

&lt;p&gt;That’s it for today!&lt;/p&gt;</content><author><name></name></author><category term="fourth" /><summary type="html">Today was a pretty sweet day! I got a lot of feedback on my PR which was really good because it made me think about the various problems or security vulnerabilities there may be. I also learned that it is good to put logic in templates and use querying stuff in helper methods so it reduces the chance of someone finding out how the app functions (without looking at the GitHub lol).</summary></entry><entry><title type="html">Noice</title><link href="http://localhost:4000/third/2018/06/22/noice.html" rel="alternate" type="text/html" title="Noice" /><published>2018-06-22T00:00:00-06:00</published><updated>2018-06-22T00:00:00-06:00</updated><id>http://localhost:4000/third/2018/06/22/noice</id><content type="html" xml:base="http://localhost:4000/third/2018/06/22/noice.html">&lt;p&gt;As my third week comes to a close, I just wanna say hell yeah. I was able to implement the voting scheme on both articles and comments seamlessly because I think I’ve got the polymorphism concept down. I didn’t have to bug Eli with any questions and I solved everything myself. YEEEEAHHHHHH BOOIIIIIII!!!!!&lt;/p&gt;

&lt;p&gt;One thing I also did today was help Peyton get the rails app running. Boy, oh boy we ran into so many problems. 
The first one was that apparently he didn’t have permissions to view or create a public key to install command-line tools. 
However, we searched it up and found that he could edit his permissions using&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/.gnupg
    
#View permissions using:
ls -l ~/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gnupg&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So after that, Peyton could finally install Ruby Version manager. The next problem that we the postgresql databases weren’t created so that was easily fixable using:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;rake&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, the last problem we had was that he was getting a &lt;code class=&quot;highlighter-rouge&quot;&gt;PG:ConnectionBad&lt;/code&gt; error whenver he was trying to access &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:3000&lt;/code&gt;. 
In order to fix that problem, go into your directory and type &lt;code class=&quot;highlighter-rouge&quot;&gt;rm postmaster.pid&lt;/code&gt;
and then type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;brew&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restart&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postgresql&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This retarts the Postgres server I think. After doing that, Peyton finally could see the Rails welcome page!&lt;/p&gt;

&lt;p&gt;Next week, I am going to do the bonus specs that Eli listed in BaseCamp because I finished all the basic ones a week early!&lt;/p&gt;</content><author><name></name></author><category term="third" /><summary type="html">As my third week comes to a close, I just wanna say hell yeah. I was able to implement the voting scheme on both articles and comments seamlessly because I think I’ve got the polymorphism concept down. I didn’t have to bug Eli with any questions and I solved everything myself. YEEEEAHHHHHH BOOIIIIIII!!!!!</summary></entry><entry><title type="html">You Can Vote!</title><link href="http://localhost:4000/third/2018/06/21/now-you-can-vote.html" rel="alternate" type="text/html" title="You Can Vote!" /><published>2018-06-21T00:00:00-06:00</published><updated>2018-06-21T00:00:00-06:00</updated><id>http://localhost:4000/third/2018/06/21/now-you-can-vote</id><content type="html" xml:base="http://localhost:4000/third/2018/06/21/now-you-can-vote.html">&lt;p&gt;Ahh, today was a much better day. I didn’t struggle as much as I did yesterday but I still was challenged as I was expecting. 
Today, I worked on implementing the voting scheme on just the articles. In order to do that, I had to learn about ajax and how you can assign
background tasks, essentially, within your app. At first it was pretty hard because I was just trying to learn from the internet. But turns out, I didn’t have the right resources. All the things I was looking at rendered a javascript file after a remote link is clicked but that javascript never did anything. 
Nothing was working!!!!&lt;/p&gt;

&lt;p&gt;So I talked to Eli and he told me another way to do it. Instead of doing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#controller.rb&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;respond_to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;js&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I did:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#controller.rb&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;key: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And this would send the browser a response with a hash. In order to retrieve that response, you need to bind the link to an ajax callback method. For getting the response after successful execution, you should run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#button'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ajax:success'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//the response is in the 'evt' parameter&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'detail'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//do stuff with the response. &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Also, Patrick gave me guidance to how I should create a vote model to keep track of all the votes any user has made on any article. This would help ensure that no user can vote the same value multiple times. I still have yet to implement a feature where the user can take back their vote if they accidentally clicked something. But that’s fore later, let’s just get the core functionality down.&lt;/p&gt;</content><author><name></name></author><category term="third" /><summary type="html">Ahh, today was a much better day. I didn’t struggle as much as I did yesterday but I still was challenged as I was expecting. Today, I worked on implementing the voting scheme on just the articles. In order to do that, I had to learn about ajax and how you can assign background tasks, essentially, within your app. At first it was pretty hard because I was just trying to learn from the internet. But turns out, I didn’t have the right resources. All the things I was looking at rendered a javascript file after a remote link is clicked but that javascript never did anything. Nothing was working!!!!</summary></entry><entry><title type="html">Another Hard Day.</title><link href="http://localhost:4000/third/2018/06/20/another-hard-day.html" rel="alternate" type="text/html" title="Another Hard Day." /><published>2018-06-20T00:00:00-06:00</published><updated>2018-06-20T00:00:00-06:00</updated><id>http://localhost:4000/third/2018/06/20/another-hard-day</id><content type="html" xml:base="http://localhost:4000/third/2018/06/20/another-hard-day.html">&lt;p&gt;Not gonna lie but today was pretty challenging. I finished up the comments feature and now it was time to write some tests, both model and feature.&lt;/p&gt;

&lt;p&gt;The model specs were not that hard actually. They were pretty simple and not too challenging.&lt;/p&gt;

&lt;p&gt;However, the real doozy came down to the feature specs. At first, I thought it was going to be pretty simple like the model specs but I was WRONG. One thing I forgot about Capybara is that it doesn’t fricken render the javascript. That’s a problem because in order to reply to another comment, I use javascript to make the textarea appear when a button is clicked so the page isn’t littered with like tons of big textarea boxes. So, I had to figure out how the heck I was going to render javascript. At first, my methods didn’t work so I had to ask Eli. Eli recommended using the &lt;code class=&quot;highlighter-rouge&quot;&gt;chromedriver-helper&lt;/code&gt; gem and he gave me the configuration he used for it. But, my tests were still not working. It wasn’t finding elements that were CLEARLY on the page and I had no idea wtf was going on.&lt;/p&gt;

&lt;p&gt;After about a half-hour or so, Eli and I figured it out but then I ran into another problem. When the javascript renders, so does the CKEditor textareas. This is a problem because using the plain &lt;code class=&quot;highlighter-rouge&quot;&gt;fill_in &quot;Label&quot;, with: &quot;Content&quot;&lt;/code&gt; command wasn’t working anymore because it wasn’t finding the textbox. Sooooo, I had to figure out how to enter text within the CKEditor textarea and that took a whole-nother gosh darn hour.&lt;/p&gt;

&lt;p&gt;After that, I ran into another problem. The &lt;a&gt; element that when clicked renders the textarea wasn’t showing as a clickable link through Capybara. This was because I didn’t define a href attribute which I guess is necessary. When I set the href to #, my javascript was messing up because the page kept reloading and resetting the textboxes. So after digging around the internet, apparently you can define href to be &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript:void(0)&lt;/code&gt; and clicking the &lt;a&gt; tag does absolutely nothing!!!!!!&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once figuring all that out, I got my feature specs to work and now all my tests pass. YAY! But despite that, these problems hurt my brain and I had to dig around Google for so long because it is rare that people come across the type of problems I have.&lt;/p&gt;

&lt;p&gt;Tomorrow, I am going to finalize my blog and start working on the Week 4 specs which is the ability to upvote/downvote articles and filter the articles based on whatever the user chooses.&lt;/p&gt;</content><author><name></name></author><category term="third" /><summary type="html">Not gonna lie but today was pretty challenging. I finished up the comments feature and now it was time to write some tests, both model and feature.</summary></entry><entry><title type="html">I’m Exhausted</title><link href="http://localhost:4000/third/2018/06/19/agh-im-tired.html" rel="alternate" type="text/html" title="I'm Exhausted" /><published>2018-06-19T00:00:00-06:00</published><updated>2018-06-19T00:00:00-06:00</updated><id>http://localhost:4000/third/2018/06/19/agh-im-tired</id><content type="html" xml:base="http://localhost:4000/third/2018/06/19/agh-im-tired.html">&lt;p&gt;Holy moly what an exhausting day I just had.&lt;/p&gt;

&lt;p&gt;First, I started working on a blog for Viget that explained how Rails 5.2 stored secret credentials in a different way than previous versions. I sent the finished blog to be looked over by 3 devs and a writer to look over and there were a lot of comments haha. Not that I don’t mind but it just reinforces that thankfully I am not a writer myself. I’ve always been pretty bad at writing good sentence structures and that stuff but hurray, I’m a software developer so it doesn’t matter a whole lot.&lt;/p&gt;

&lt;p&gt;Next, I started working on implementing comments on articles. Eli’s Haxxor News specs said that comments could be nested within eachother and there really is not a limit to how deep the layers go. This was really confusing at first and I knew right off the bat that I couldn’t simply use ‘has_many’ and ‘belongs_to’ because a comment could belong to either a post or an article, you won’t know which. So today, I learned about polymorphism and that concept is how you attack the idea that comments could belong to other comments or an article. It’s actually pretty sweet that you could do that and I’m kinda interested in the other kind of manipulations you can do with models.&lt;/p&gt;

&lt;p&gt;After I figured out polymorphism, I actually had to embed the functionality within my html code. Now that was a real pain in the booty. As of this moment, it took me almost 3 hours just to design the page that allowed adding comments. A part of the three hours were spent trying to figure out why CKEditor was being stupid and wasn’t creating a formatting toolbar on my textareas. While trying to figure out a solution, I found out that CKEdtior, the library that creates the formatting toolbar, actually has a rails gem that I could use. So instead of using a script to replace the textareas, I could just use:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= form.cktext_area :body, class: 'blah', ckeditor: {ui_color: #123456,...}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where I could configure the textarea box using a hash of options, as kinda highlighted above. Although this seems awesome, this took me like fricken 2 hours to figure out because there’s just so much that you need to do in order to get the rails gem to actually work.&lt;/p&gt;

&lt;p&gt;Then, it took me another hour or so to design the comments area and that was kinda also a pain in the booty because I wanted to go a little farther and have cool user interaction where you could choose to reply to a comment and a textarea will show up. The javascript was pretty simple but just organizing everything was pretty exhausting.&lt;/p&gt;

&lt;p&gt;Tomorrow, I’m going to continue to work on the comments feature. I still have to write tests to make sure that everything works the way it is meant to be without going in and doing QA tests.&lt;/p&gt;</content><author><name></name></author><category term="third" /><summary type="html">Holy moly what an exhausting day I just had.</summary></entry><entry><title type="html">Whew, I did it.</title><link href="http://localhost:4000/third/2018/06/18/whew.html" rel="alternate" type="text/html" title="Whew, I did it." /><published>2018-06-18T00:00:00-06:00</published><updated>2018-06-18T00:00:00-06:00</updated><id>http://localhost:4000/third/2018/06/18/whew</id><content type="html" xml:base="http://localhost:4000/third/2018/06/18/whew.html">&lt;p&gt;Dang, it’s my third week already here at Viget. Time really flies by.&lt;/p&gt;

&lt;p&gt;Today, I did a lot in terms of fixing some stuff in my pull requests (Thanks Eli and David!)&lt;/p&gt;

&lt;p&gt;For my first pull request, which was the branch that managed password resets, I fixed a lot of security issues. I learned that some people aren’t stupid and could inspect my html and see some hidden fields. For some context, I had the user id stored in a hidden field on my html so I could reference it when I wanted to update the user’s password. Now, I fixed it to be where I stored the user in a session variable and then destroyed it once the user has successfully reset their password. Then, there was an issue where I had the password token for each user be unique and if I regenerated the password token, the app could crash because the regenerated password token matched another user. I fixed this issue to make it so the password token is NOT unique but the reset password url contains the user’s email for extra validation. Finally, I fixed an issue where I put my gmail account’s unique app password in my commit (which can be apparently used to hack into my gmail, whoops) but now the password is stored in the encrypted credentials file.&lt;/p&gt;

&lt;p&gt;For my second and final PR, which was user-post interaction, I fixed some small thingss. These fixes are mainly efficiency fixes and being able to handle future complexity. I made some logical changes where some methods are stored in different areas and accessed differently.&lt;/p&gt;

&lt;p&gt;After all that was done, I had to push everything to Heroku. This may seem like a non-daunting task but I didn’t push anything to Heroku since I created my article model. So my app didn’t have any user functionality yet. When I pushed my changes to Heroku, a couple things happened. My heroku master branch was apparently a commit ahead of my local branch so I had to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heroku&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, there was apparently a syntax error in my javascript file but oddly enough, the error log didn’t really specifty that. It instead said:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Uglifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Unexpected&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;token: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;punc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;To&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ES6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;harmony&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;must&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Uglifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:harmony&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Lol it’s kinda funny that the class name is Uglifier. That’s hilarious lmfao. But that error apparently means that there’s something wrong with my javascript, specifically the javascript that implemented the formatting toolbar. Thankfully, I figured it out and fixed the issue.&lt;/p&gt;

&lt;p&gt;With a miracle, my app compiled correctly and everything works! I added a article model spec because I had a silly error where I didn’t account for a nil user when checking who the parent of the article was.&lt;/p&gt;

&lt;p&gt;With my remaining time for the day, I am going to add a comment controller as well as a model. I will prolly continue with this tomorrow as well.&lt;/p&gt;</content><author><name></name></author><category term="third" /><summary type="html">Dang, it’s my third week already here at Viget. Time really flies by.</summary></entry><entry><title type="html">A New Feature</title><link href="http://localhost:4000/second/2018/06/15/a-new-feature.html" rel="alternate" type="text/html" title="A New Feature" /><published>2018-06-15T00:00:00-06:00</published><updated>2018-06-15T00:00:00-06:00</updated><id>http://localhost:4000/second/2018/06/15/a-new-feature</id><content type="html" xml:base="http://localhost:4000/second/2018/06/15/a-new-feature.html">&lt;p&gt;As the second week of my Viget internship comes to a close, I’ve been able to successfully add a pretty sweet feature that seems mediocre to other people: resetting a password.&lt;/p&gt;

&lt;p&gt;In this process, I learned that it’s important to stay away from creating custom routes and instead create a separate controller to handle CRUD actions, even if it doesn’t have a model associated with it. I had to create a PasswordReset controller which had the new, create, edit, and update actions to handle a user wanting to reset their password.&lt;/p&gt;

&lt;p&gt;Also, Rails has a nifty thing that allows you to regenerate password tokens so someone doesn’t purposely change someone’s password by guessing the proper token. Simply make sure that you add:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;has_secure_token&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;whatever&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;called&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;into the proper model.&lt;/p&gt;

&lt;p&gt;Also, I learned how to properly configure Active Mailer. There’s actually a separate kinda controller that handle’s all the mailing functions. Also, for your and my reference, again, this is how a sample config should look if you’re using gmail to send your email.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;raise_delivery_errors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_deliveries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delivery_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:smtp&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SMTP settings for gmail&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;smtp_settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:address&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;smtp.gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:port&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;587&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:user_name&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nflkiddo.productions@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:mail_pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:authentication&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;plain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:enable_starttls_auto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_caching&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default_url_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;host: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost:3000&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My password isn’t actually that jumbled mess but instead an app password. If you want to hack into my email, by all means go ahead. I haven’t used that email in such a long time and only still exists as kinda a burner email where bots or people can send unwanted emails there.&lt;/p&gt;

&lt;p&gt;Otherwise, that’s it for today! I’ve successfully written feature specs for resetting a password and it all passes! Ahhhh that’s relieving.&lt;/p&gt;</content><author><name></name></author><category term="second" /><summary type="html">As the second week of my Viget internship comes to a close, I’ve been able to successfully add a pretty sweet feature that seems mediocre to other people: resetting a password.</summary></entry></feed>