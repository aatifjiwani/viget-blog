<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-07-11T09:49:23-06:00</updated><id>http://localhost:4000/</id><title type="html">Jiwani | Viget Blog 2018</title><subtitle>This is a blog created for my 2018 Viget Internship as their Rails Developer intern. </subtitle><entry><title type="html">Yay I Fixed It</title><link href="http://localhost:4000/sixth/2018/07/10/fixed.html" rel="alternate" type="text/html" title="Yay I Fixed It" /><published>2018-07-10T00:00:00-06:00</published><updated>2018-07-10T00:00:00-06:00</updated><id>http://localhost:4000/sixth/2018/07/10/fixed</id><content type="html" xml:base="http://localhost:4000/sixth/2018/07/10/fixed.html">&lt;p&gt;So if you read yesterday’s blog post, I said I encountered a problem with the method &lt;code class=&quot;highlighter-rouge&quot;&gt;setValuesWithKeys(dict: Dictionary)&lt;/code&gt;. Today, I finally found the solution to that problem and it was by simply adding &lt;code class=&quot;highlighter-rouge&quot;&gt;@objc&lt;/code&gt; in front of the attributes you wanted assigned by the method. This is needed because in Swift 3, I guess every object was kinda treated like an Objective-C object and that it was able to be encoded with values from another source. However, Swift 4 removed that option and now you have to manually tell Swift that I want this object treated as if it was in Objective-C. I don’t understand why there are those differences but oh well.&lt;/p&gt;

&lt;p&gt;Once I fixed that problem, I pretty much finished up the AppStore tutorial. Everything pretty much does look like the actual App Store except for a few key things. Now, I am going to work on the chat app using Firebase. Hopefully when I finish that by the end of this week, I have enough experience to start developing on my own.&lt;/p&gt;

&lt;p&gt;Today was pretty normal so nothing else I need to say. See ya tomorrow.&lt;/p&gt;</content><author><name></name></author><category term="sixth" /><summary type="html">So if you read yesterday’s blog post, I said I encountered a problem with the method setValuesWithKeys(dict: Dictionary). Today, I finally found the solution to that problem and it was by simply adding @objc in front of the attributes you wanted assigned by the method. This is needed because in Swift 3, I guess every object was kinda treated like an Objective-C object and that it was able to be encoded with values from another source. However, Swift 4 removed that option and now you have to manually tell Swift that I want this object treated as if it was in Objective-C. I don’t understand why there are those differences but oh well.</summary></entry><entry><title type="html">Mobile Dev Time</title><link href="http://localhost:4000/sixth/2018/07/09/mobile-dev.html" rel="alternate" type="text/html" title="Mobile Dev Time" /><published>2018-07-09T00:00:00-06:00</published><updated>2018-07-09T00:00:00-06:00</updated><id>http://localhost:4000/sixth/2018/07/09/mobile-dev</id><content type="html" xml:base="http://localhost:4000/sixth/2018/07/09/mobile-dev.html">&lt;p&gt;Today it starts! I am using Lets Build That App on YouTube to help me get jumpstarted on iOS development. As I am going through these lessons, slowly but surely, I’ve noticed a few things. One is that Swift is a seamless but complicated language. There are so many components to it and so much to keep track of that it can be a little much sometimes. However, Swift looks really cool and XCode is pretty nice so I’m not complaining a whole lot. Next, I’ve learned that in order to do good mobile dev for iOS, you need to know a LOT of methods. The tutorial I am going through now doesn’t use the GUI to outline the UI but instead hardcodes everything, including the constraints. In order to do so, there are so many fricken methods and some of those methods have enormous names. Like the method name itself is like 30 characters long and I’m thinking to myself, “How the heck am I supposed to remember that…?”&lt;/p&gt;

&lt;p&gt;I did come across a problem that I still haven’t fixed though. Apparently, making API requests and getting the response in a JSON format is more complicated than it seems. I can’t follow the tutorial closely because the dude is using Swift 3 while I am using Swift 4. The two versions vary mostly in that the method names are different and there are a lot of deprecated things. So, I’ve encountered a problem where I get the following error:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Cannot&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscript&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Data'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I get this error because apparently the method &lt;code class=&quot;highlighter-rouge&quot;&gt;setValuesWithKeys(dict: NSDictionary)&lt;/code&gt; can’t read the JSON response properly and can’t bind the matching values with the class attributes. This is pissing me off because I can’t use the solution the YouTube video has because it is using Swift 3 and not 4. So now, I have to go ahead and find a solution online which I will do tomorrow.&lt;/p&gt;

&lt;p&gt;In terms of the group project, Devise is confusing. As a group, we’ve decided the sign in/up page will be a modal that pops up on the current page and Devise wasn’t made for that type of manipulation by default. So it took a lot of digging around the gem file to figure out how I could redirect the POST request to an overriden method that signs the user in or creates a new one and returns some data to update specific elements. I got it now but it sure was confusing because of all the methods that Devise uses in order to authenticate or create a new user.&lt;/p&gt;

&lt;p&gt;That’s all for today, see ya tomorrow.&lt;/p&gt;</content><author><name></name></author><category term="sixth" /><summary type="html">Today it starts! I am using Lets Build That App on YouTube to help me get jumpstarted on iOS development. As I am going through these lessons, slowly but surely, I’ve noticed a few things. One is that Swift is a seamless but complicated language. There are so many components to it and so much to keep track of that it can be a little much sometimes. However, Swift looks really cool and XCode is pretty nice so I’m not complaining a whole lot. Next, I’ve learned that in order to do good mobile dev for iOS, you need to know a LOT of methods. The tutorial I am going through now doesn’t use the GUI to outline the UI but instead hardcodes everything, including the constraints. In order to do so, there are so many fricken methods and some of those methods have enormous names. Like the method name itself is like 30 characters long and I’m thinking to myself, “How the heck am I supposed to remember that…?”</summary></entry><entry><title type="html">I Know What To Do</title><link href="http://localhost:4000/fifth/2018/07/06/i-chose-mobile-dev.html" rel="alternate" type="text/html" title="I Know What To Do" /><published>2018-07-06T00:00:00-06:00</published><updated>2018-07-06T00:00:00-06:00</updated><id>http://localhost:4000/fifth/2018/07/06/i-chose-mobile-dev</id><content type="html" xml:base="http://localhost:4000/fifth/2018/07/06/i-chose-mobile-dev.html">&lt;p&gt;Ahh, what a relaxing lil break I just had celebrating our country and my mom’s birthday. Now, it’s time to get back to work! Today was kinda busy and I wasn’t able to really get grunt work done since I was in a couple standups and we had FLF. However, what I was able to do was talk to Prayash about where to go from here. I learned a lot from the little session we had because he showed me the quirks of React and how it is awesome but also how mobile development in pure Swift looks like.&lt;/p&gt;

&lt;p&gt;So I’ve made a decision. In my eyes as a developer, when I am learning new things, I like to take the hard route. I like learning all the nitty-gritty basics and how to create something by using as little of external libraries as possible. Therefore, for the rest of my internship, I want to start building an app for iOS using pure Swift. I chose this because I want to master the basics of app development and then be able to take it a step further and use React native for future applications. This allows me to learn the concept of building mobile apps without taking the easy way like React allows you to kinda do. Easy meaning that there are things to make your life easier as a developer which is what React pretty much is.&lt;/p&gt;

&lt;p&gt;Also, I’ve been able to update the READMEs on my github repositories so other employers or visitors can see what the actual repo is for without digging through all the code and extraneous files.&lt;/p&gt;

&lt;p&gt;Later today, I am going to edit some of the backend for This or That in order to include the ability to have your polls expire after a given amount of time. This should be pretty easy and not something that will take long.&lt;/p&gt;

&lt;p&gt;Otherwise, see you next week!!!&lt;/p&gt;</content><author><name></name></author><category term="fifth" /><summary type="html">Ahh, what a relaxing lil break I just had celebrating our country and my mom’s birthday. Now, it’s time to get back to work! Today was kinda busy and I wasn’t able to really get grunt work done since I was in a couple standups and we had FLF. However, what I was able to do was talk to Prayash about where to go from here. I learned a lot from the little session we had because he showed me the quirks of React and how it is awesome but also how mobile development in pure Swift looks like.</summary></entry><entry><title type="html">What Do I Do Now?</title><link href="http://localhost:4000/fifth/2018/07/03/what-to-do.html" rel="alternate" type="text/html" title="What Do I Do Now?" /><published>2018-07-03T00:00:00-06:00</published><updated>2018-07-03T00:00:00-06:00</updated><id>http://localhost:4000/fifth/2018/07/03/what-to-do</id><content type="html" xml:base="http://localhost:4000/fifth/2018/07/03/what-to-do.html">&lt;p&gt;So today, I finished addressing the comments on the backend structure PR for This or That and now I am wondering, what do I do now?&lt;/p&gt;

&lt;p&gt;I’ve been able to occupy myself for quite a while today because I had a Boulder office lunch with the CEO and I had a couple meetings here and there. But besides that, I have no clue what I do now.&lt;/p&gt;

&lt;p&gt;In order to solve that problem, I did two things. One, I talked to Prayash about mobile dev/React to see how I can start looking at mobile development as an option for the rest of my internship. Of course I won’t be ditching Rails at all because I still have to use it in order to create the group project. However, I don’t really want to always do Rails and I’ve always had an interest in mobile development. So maybe that can be an option.&lt;/p&gt;

&lt;p&gt;Second, I started looking into how Chrome extensions are made. I thought it was always pretty cool that you could create extensions that can interact with the webpage you are currently on. So therefore, I started to take a peek at the documentation and got started on my first ever Chrome extension. However, learning how to do so is really confusing. The Google dev documentation on how to build extensions is pretty confusing and hard to follow. I got the basics down like having a manifest where you declare what all you’re going to use and what permissions you need, but I still don’t know how to make things work together. So after a little bit of tinkering before I have to leave, I was able to get the extension working to where it changed the color of the background on the page you’re currently on to orange. Isn’t that cool! Syke it’s super boring right now but maybe I’ll experiment with it later.&lt;/p&gt;

&lt;p&gt;Tomorrow if July 4th and Thursday is my mom’s birthday so I won’t be working until Friday. See ya’ll then!&lt;/p&gt;</content><author><name></name></author><category term="fifth" /><summary type="html">So today, I finished addressing the comments on the backend structure PR for This or That and now I am wondering, what do I do now?</summary></entry><entry><title type="html">It Begins</title><link href="http://localhost:4000/fifth/2018/07/02/it-begins.html" rel="alternate" type="text/html" title="It Begins" /><published>2018-07-02T00:00:00-06:00</published><updated>2018-07-02T00:00:00-06:00</updated><id>http://localhost:4000/fifth/2018/07/02/it-begins</id><content type="html" xml:base="http://localhost:4000/fifth/2018/07/02/it-begins.html">&lt;p&gt;If you noticed I skipped Friday’s post of last week, I’m sorry. I got super busy and I just didn’t have time to write a post by the end of the day. 
However. today I finished Haxxor News!! All the PRs got approved and it is officially deployed at [haxxornews-vgt.herokuapp.com].&lt;/p&gt;

&lt;p&gt;After I got that finished, I started making ground on the intern group project. I was able to figure out Devise and authenticate a user with their modules. It’s kinda weird how the gem works. It literally creates all the controllers for you which is pretty cool but can be pretty confusing. If you want to do custom stuff to the controller, you have to extend it from the super controller and override the methods. It also generates all the views for you so you don’t have to bother creating the forms for user registration or sign in. Right now, the forms are unstyled and the app looks pretty odd right now but I’m going to wait till Peyton can get working on styling all that stuff before I can really say anything.&lt;/p&gt;

&lt;p&gt;Once completing that, I started working on all the models that the app might need at first glance. I created the Poll, Vote, Comment, and Follow models as well as implemented the respective validations and associations. Also, I created, or am in the process of creating, the specs for each model. While I was creating the model spec for Follows, Eli taught me something pretty sweet. If you want to find the polls that the user is following, you can write an association like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:followed_polls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through: :follows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;source: :poll&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, you can execute user.followed_polls and get a list of all the polls that the user follows. Isn’t that fricken sick!!!!!!!!!&lt;/p&gt;

&lt;p&gt;I know that association is really going to come in handy when we want to display all the polls a user follows.&lt;/p&gt;

&lt;p&gt;Well, that’s it for today and I am going to continue working on this tomorrow. Bye!&lt;/p&gt;</content><author><name></name></author><category term="fifth" /><summary type="html">If you noticed I skipped Friday’s post of last week, I’m sorry. I got super busy and I just didn’t have time to write a post by the end of the day. However. today I finished Haxxor News!! All the PRs got approved and it is officially deployed at [haxxornews-vgt.herokuapp.com].</summary></entry><entry><title type="html">OAuth is One of its Kind</title><link href="http://localhost:4000/fourth/2018/06/28/oauth.html" rel="alternate" type="text/html" title="OAuth is One of its Kind" /><published>2018-06-28T00:00:00-06:00</published><updated>2018-06-28T00:00:00-06:00</updated><id>http://localhost:4000/fourth/2018/06/28/oauth</id><content type="html" xml:base="http://localhost:4000/fourth/2018/06/28/oauth.html">&lt;p&gt;Boy oh boy, have I had a wild day. Today, I tried getting a user to be able to sign in and create an account with Facebook. I came across a load of problems that kinda confused me. The first one was that when I create a user from Facebook, I can’t really give them a password because it can cause confusion and pose a security risk. Therefore, the &lt;code class=&quot;highlighter-rouge&quot;&gt;password_digest&lt;/code&gt; column in the user model is &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; for that user. This causes problems because the user model validates the password, for presence and confirmation, automatically with the tag &lt;code class=&quot;highlighter-rouge&quot;&gt;has_secure_token&lt;/code&gt;. So then, I had to figure out how to bypass all those validations and I did that by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;has_secure_password validations:false&lt;/code&gt; and then manually adding my own validations to run under certain conditions. This caused another problem because if the &lt;code class=&quot;highlighter-rouge&quot;&gt;password_digest&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;, BCrypt throws an error saying it can’t read the password because it’s blank. This forced me to think about an alternate solution where I had to create a new model called &lt;code class=&quot;highlighter-rouge&quot;&gt;OAuthUsers&lt;/code&gt; that properly stored which users created used external services. So, when a FB user tries to sign in manually, I have to check whether or not their username is stored in the &lt;code class=&quot;highlighter-rouge&quot;&gt;OAuthUsers&lt;/code&gt; model and alert them that they need to sign in via their provided service.&lt;/p&gt;

&lt;p&gt;Besides OAuth, I made some changes to the group project and tried to rebase my feature branch with Peyton’s old feature branch. In order to do this, I needed to rebase my branch onto Peyton’s branch but this caused so much confusion. When I rebased, fixed the merge, and tried to push the changes to the respective branch, I would get an error saying that I need to &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull..&lt;/code&gt; before I could do anything. When I did that, it would give me more merge errors, which I fixed. From there, honestly I don’t know what happened but I rebased accidentally multiple times because I thought the rebase wasn’t working at all. So I ended up creating like 10-12 false commits which isn’t good because it makes it harder to find the right commit with the right changes. So tomorrow or before end of day today, I need to ask Eli for help on how to properly rebase again so I don’t screw up in the future.&lt;/p&gt;

&lt;p&gt;Tomorrow, I’m going to add OAuth feature specs for FB and hopefully that goes smoothly.&lt;/p&gt;</content><author><name></name></author><category term="fourth" /><summary type="html">Boy oh boy, have I had a wild day. Today, I tried getting a user to be able to sign in and create an account with Facebook. I came across a load of problems that kinda confused me. The first one was that when I create a user from Facebook, I can’t really give them a password because it can cause confusion and pose a security risk. Therefore, the password_digest column in the user model is nil for that user. This causes problems because the user model validates the password, for presence and confirmation, automatically with the tag has_secure_token. So then, I had to figure out how to bypass all those validations and I did that by setting has_secure_password validations:false and then manually adding my own validations to run under certain conditions. This caused another problem because if the password_digest is set to nil, BCrypt throws an error saying it can’t read the password because it’s blank. This forced me to think about an alternate solution where I had to create a new model called OAuthUsers that properly stored which users created used external services. So, when a FB user tries to sign in manually, I have to check whether or not their username is stored in the OAuthUsers model and alert them that they need to sign in via their provided service.</summary></entry><entry><title type="html">APIs</title><link href="http://localhost:4000/fourth/2018/06/27/apis.html" rel="alternate" type="text/html" title="APIs" /><published>2018-06-27T00:00:00-06:00</published><updated>2018-06-27T00:00:00-06:00</updated><id>http://localhost:4000/fourth/2018/06/27/apis</id><content type="html" xml:base="http://localhost:4000/fourth/2018/06/27/apis.html">&lt;p&gt;So today after I finished addressing the comments on my PR, I started working on interacting with APIs. The only one that I really wanted to include was a geolocation API so that when users sign up or create a post, they can choose to have a location attached to it. From there, the API gets the location from the IP address where the request was from and it’ll attach the location to the model.&lt;/p&gt;

&lt;p&gt;I also interacted with the Google Map Static API where I can get an image of the location from Google Maps when given a set of lat/lon. This was pretty easy and honestly, I didn’t run into many problems I couldn’t solve on my own.&lt;/p&gt;

&lt;p&gt;However, that all changes with OAuth. To take my app to the next step, I started to implement OAuth2 so users could, for now, sign in with Facebook instead of natively through the app. This was a serious pain because there were so many problems I encountered. The first one was that the gem itself had a bug that incorrectly raised an error because it couldn’t find FB’s access token, but it was clearly there. The solution to that problem was simply updating the gem but I don’t know why it wasn’t up to date when I first installed it.&lt;/p&gt;

&lt;p&gt;Then, in order to get more information about the Facebook user, you have to fricken make a request to FB and prove to them you aren’t doing any malicious things to expose the user. I haven’t done this yet because it’ll take too much time and that’s time that I don’t have now that the group intern project is starting to pertain to me and my department.&lt;/p&gt;

&lt;p&gt;Tomorrow, I’m just going to continue working on OAuth and hopefully it works.&lt;/p&gt;</content><author><name></name></author><category term="fourth" /><summary type="html">So today after I finished addressing the comments on my PR, I started working on interacting with APIs. The only one that I really wanted to include was a geolocation API so that when users sign up or create a post, they can choose to have a location attached to it. From there, the API gets the location from the IP address where the request was from and it’ll attach the location to the model.</summary></entry><entry><title type="html">Donneeee</title><link href="http://localhost:4000/fourth/2018/06/26/doneeeee.html" rel="alternate" type="text/html" title="Donneeee" /><published>2018-06-26T00:00:00-06:00</published><updated>2018-06-26T00:00:00-06:00</updated><id>http://localhost:4000/fourth/2018/06/26/doneeeee</id><content type="html" xml:base="http://localhost:4000/fourth/2018/06/26/doneeeee.html">&lt;p&gt;Today was another pretty dope day. I finished addressing the comments on my filter article PR and I finished adding in a profile page for users. I ran into a couple silly problems because I accidentally made the suggested changes for the PR on my &lt;code class=&quot;highlighter-rouge&quot;&gt;user-profile&lt;/code&gt; branch which was a no-no. So I had to mentally figure out which modified files should be committed to the &lt;code class=&quot;highlighter-rouge&quot;&gt;filter-article&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;user-profile&lt;/code&gt; branches.&lt;/p&gt;

&lt;p&gt;In terms of the user profile page, I had a lot of fun with it. I was able to style it pretty darn well and I added a sweet animation that allows you to see the different articles you’ve posted as well as the articles you’ve voted on. I did run into an issue where if I voted on an article in the “Your Articles” tab, the vote count of that article would not update in the “Your Votes” tab. So I had to completely rethink how I updated those elements with javascript. Luckily, I learned that you can assemble an array of HTML elements with the same class name using:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementByClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;class-name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I used this method to be able to scan for the vote-count elements for the same article, hidden or not, and update the respective vote count. Then, I was able to easily write a user-profile spec and everything passes!!!&lt;/p&gt;

&lt;p&gt;Now, I kinda finished everything that Eli gave me to do and so I am going to ask him for some ideas of what else I should implement.&lt;/p&gt;

&lt;p&gt;That’s it for today!&lt;/p&gt;</content><author><name></name></author><category term="fourth" /><summary type="html">Today was another pretty dope day. I finished addressing the comments on my filter article PR and I finished adding in a profile page for users. I ran into a couple silly problems because I accidentally made the suggested changes for the PR on my user-profile branch which was a no-no. So I had to mentally figure out which modified files should be committed to the filter-article or user-profile branches.</summary></entry><entry><title type="html">Bonus Spec</title><link href="http://localhost:4000/fourth/2018/06/25/bonus-spec.html" rel="alternate" type="text/html" title="Bonus Spec" /><published>2018-06-25T00:00:00-06:00</published><updated>2018-06-25T00:00:00-06:00</updated><id>http://localhost:4000/fourth/2018/06/25/bonus-spec</id><content type="html" xml:base="http://localhost:4000/fourth/2018/06/25/bonus-spec.html">&lt;p&gt;Today was a pretty sweet day! I got a lot of feedback on my PR which was really good because it made me think about the various problems or security vulnerabilities there may be. I also learned that it is good to put logic in templates and use querying stuff in helper methods so it reduces the chance of someone finding out how the app functions (without looking at the GitHub lol).&lt;/p&gt;

&lt;p&gt;Then, today I also worked on getting the home page to filter articles based on how high its been rated within the past year, month, day, or all-time. Originally, I was just going to use ajax in order to re-filter the current list of articles asynchronously but Eli gave me a better, more logical, and ultimately easier way of doing it. I just simply send a GET request to the index action of the Article controller with a parameter of how I want to filter the articles. Then, I just check that the parameter is there and perform some actions on the Vote model.&lt;/p&gt;

&lt;p&gt;I also learned about scope which is how I perform the databse queries to get the highest rated articles of a given time period. It took a lot of thinking honestly and I still don’t believe I have the best way of doing it. But, so far everything works and I’m about done with doing the testing.&lt;/p&gt;

&lt;p&gt;That’s it for today!&lt;/p&gt;</content><author><name></name></author><category term="fourth" /><summary type="html">Today was a pretty sweet day! I got a lot of feedback on my PR which was really good because it made me think about the various problems or security vulnerabilities there may be. I also learned that it is good to put logic in templates and use querying stuff in helper methods so it reduces the chance of someone finding out how the app functions (without looking at the GitHub lol).</summary></entry><entry><title type="html">Noice</title><link href="http://localhost:4000/third/2018/06/22/noice.html" rel="alternate" type="text/html" title="Noice" /><published>2018-06-22T00:00:00-06:00</published><updated>2018-06-22T00:00:00-06:00</updated><id>http://localhost:4000/third/2018/06/22/noice</id><content type="html" xml:base="http://localhost:4000/third/2018/06/22/noice.html">&lt;p&gt;As my third week comes to a close, I just wanna say hell yeah. I was able to implement the voting scheme on both articles and comments seamlessly because I think I’ve got the polymorphism concept down. I didn’t have to bug Eli with any questions and I solved everything myself. YEEEEAHHHHHH BOOIIIIIII!!!!!&lt;/p&gt;

&lt;p&gt;One thing I also did today was help Peyton get the rails app running. Boy, oh boy we ran into so many problems. 
The first one was that apparently he didn’t have permissions to view or create a public key to install command-line tools. 
However, we searched it up and found that he could edit his permissions using&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/.gnupg
    
#View permissions using:
ls -l ~/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gnupg&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So after that, Peyton could finally install Ruby Version manager. The next problem that we the postgresql databases weren’t created so that was easily fixable using:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;rake&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, the last problem we had was that he was getting a &lt;code class=&quot;highlighter-rouge&quot;&gt;PG:ConnectionBad&lt;/code&gt; error whenver he was trying to access &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:3000&lt;/code&gt;. 
In order to fix that problem, go into your directory and type &lt;code class=&quot;highlighter-rouge&quot;&gt;rm postmaster.pid&lt;/code&gt;
and then type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;brew&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restart&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postgresql&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This retarts the Postgres server I think. After doing that, Peyton finally could see the Rails welcome page!&lt;/p&gt;

&lt;p&gt;Next week, I am going to do the bonus specs that Eli listed in BaseCamp because I finished all the basic ones a week early!&lt;/p&gt;</content><author><name></name></author><category term="third" /><summary type="html">As my third week comes to a close, I just wanna say hell yeah. I was able to implement the voting scheme on both articles and comments seamlessly because I think I’ve got the polymorphism concept down. I didn’t have to bug Eli with any questions and I solved everything myself. YEEEEAHHHHHH BOOIIIIIII!!!!!</summary></entry></feed>