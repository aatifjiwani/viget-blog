<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-06-15T18:30:21-06:00</updated><id>http://localhost:4000/</id><title type="html">Jiwani | Viget Blog 2018</title><subtitle>This is a blog created for my 2018 Viget Internship as their Rails Developer intern. </subtitle><entry><title type="html">A New Feature</title><link href="http://localhost:4000/second/2018/06/15/a-new-feature.html" rel="alternate" type="text/html" title="A New Feature" /><published>2018-06-15T00:00:00-06:00</published><updated>2018-06-15T00:00:00-06:00</updated><id>http://localhost:4000/second/2018/06/15/a-new-feature</id><content type="html" xml:base="http://localhost:4000/second/2018/06/15/a-new-feature.html">&lt;p&gt;As the second week of my Viget internship comes to a close, I’ve been able to successfully add a pretty sweet feature that seems mediocre to other people: resetting a password.&lt;/p&gt;

&lt;p&gt;In this process, I learned that it’s important to stay away from creating custom routes and instead create a separate controller to handle CRUD actions, even if it doesn’t have a model associated with it. I had to create a PasswordReset controller which had the new, create, edit, and update actions to handle a user wanting to reset their password.&lt;/p&gt;

&lt;p&gt;Also, Rails has a nifty thing that allows you to regenerate password tokens so someone doesn’t purposely change someone’s password by guessing the proper token. Simply make sure that you add:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;has_secure_token&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;whatever&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;called&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;into the proper model.&lt;/p&gt;

&lt;p&gt;Also, I learned how to properly configure Active Mailer. There’s actually a separate kinda controller that handle’s all the mailing functions. Also, for your and my reference, again, this is how a sample config should look if you’re using gmail to send your email.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;raise_delivery_errors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_deliveries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delivery_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:smtp&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# SMTP settings for gmail&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;smtp_settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:address&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;smtp.gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:port&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;587&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:user_name&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nflkiddo.productions@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:mail_pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:authentication&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;plain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:enable_starttls_auto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_caching&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;action_mailer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default_url_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;host: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost:3000&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My password isn’t actually that jumbled mess but instead an app password. If you want to hack into my email, by all means go ahead. I haven’t used that email in such a long time and only still exists as kinda a burner email where bots or people can send unwanted emails there.&lt;/p&gt;

&lt;p&gt;Otherwise, that’s it for today! I’ve successfully written feature specs for resetting a password and it all passes! Ahhhh that’s relieving.&lt;/p&gt;</content><author><name></name></author><category term="second" /><summary type="html">As the second week of my Viget internship comes to a close, I’ve been able to successfully add a pretty sweet feature that seems mediocre to other people: resetting a password.</summary></entry><entry><title type="html">I Found a Cool New Thing</title><link href="http://localhost:4000/second/2018/06/14/i-found-a-cool-thing.html" rel="alternate" type="text/html" title="I Found a Cool New Thing" /><published>2018-06-14T00:00:00-06:00</published><updated>2018-06-14T00:00:00-06:00</updated><id>http://localhost:4000/second/2018/06/14/i-found-a-cool-thing</id><content type="html" xml:base="http://localhost:4000/second/2018/06/14/i-found-a-cool-thing.html">&lt;p&gt;Heyo, today was pretty productive. I was able to figure out how to link users to posts and make that relational functionality work. Now, my app allows visitors to sign up, login and create a post. Also, I’ve added functionality that prevents visitors from creating posts and prevents users from deleting posts that are not there.&lt;/p&gt;

&lt;p&gt;Also, I changed the way my Active Storage credentials are stored. Instead of having them stored in a .json file in another folder, Rails 5.2 has a new, unique way to do it. Unlike Rails 5.1 and below, you had to store your credentials in a file called secret.yml. Now, Rails secrets is deprecated in 5.2 and instead, credentials are stored in an encrypted file called credentials.yml.enc.&lt;/p&gt;

&lt;p&gt;I am going to post a Viget blog all about this but for your and my reference, this is how it goes. To start fresh, delete the credentials.yml.enc and master.key file in your config/ folder. Then, in a command line interface, write&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;EDITOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'subl --wait'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:edit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The reason there we are setting ‘EDITOR’ to a specific text editor is because when you run the credentials:edit command, Rails opens up the decrypted credentials file in the specified text editor. This way, you can quickly add/edit/delete any credentials, save, and quit the editor and Rails will automatically re-encrypt the credentials file. It’s actually pretty sweet.&lt;/p&gt;

&lt;p&gt;Also, DO NOT remove master.key. Rails automatically adds this file in .gitignore so it isn’t going to be pushed to a repo but this file contains the decryption key for your credentials. So whatever you do, don’t lose it.&lt;/p&gt;

&lt;p&gt;If you’re deploying your app via Heroku, you can add a config variable named RAILS_MASTER_KEY and set it equal to the decryption key.&lt;/p&gt;

&lt;p&gt;And that’s it for today!&lt;/p&gt;</content><author><name></name></author><category term="second" /><summary type="html">Heyo, today was pretty productive. I was able to figure out how to link users to posts and make that relational functionality work. Now, my app allows visitors to sign up, login and create a post. Also, I’ve added functionality that prevents visitors from creating posts and prevents users from deleting posts that are not there.</summary></entry><entry><title type="html">Today I Struggled…</title><link href="http://localhost:4000/second/2018/06/13/today-was-hard.html" rel="alternate" type="text/html" title="Today I Struggled..." /><published>2018-06-13T00:00:00-06:00</published><updated>2018-06-13T00:00:00-06:00</updated><id>http://localhost:4000/second/2018/06/13/today-was-hard</id><content type="html" xml:base="http://localhost:4000/second/2018/06/13/today-was-hard.html">&lt;p&gt;Today was hard holy cow. I started and finished working on user creation and authentication and boi was that hard.&lt;/p&gt;

&lt;p&gt;In terms of user creation, it wasn’t hard to setup the front-end and make sure that my form submits properly. However, when it came to user authentication, that’s when stuff got real hard.&lt;/p&gt;

&lt;p&gt;I ran into a lot of problems when trying to figure out password encryption. I used the bcrypt gem, which is what Viget uses in their rails apps, and the guide I was using was absolute trash. It did not go over how to decrypt the password once it was encrypted and stored into the database.&lt;/p&gt;

&lt;p&gt;Once I ran into that problem, I had to pretty much start all over. I had to change the user table schema because apparently bcrypt needs a column labeled ‘password_digest’. This was NOT expressed in the guide I was using before. I also had to import certain methods that bcrypt uses to automatically authenticate a user when given the right password.&lt;/p&gt;

&lt;p&gt;Then, I had to create a session controller which was kinda tricky because it doesn’t necessarily have a model associated with it. So everytime you go to a new route, it does nothing with my db. All it does it simply keep track of the user ID in the session hash that is bundled up into a cookie that is brought to every page you navigate to.&lt;/p&gt;

&lt;p&gt;After all that, I decided to install FactoryBot which was another challenge on its own. There were a lot of configurations that I had to add to certain files which kinda confused the living heck outta me. But finally, I figured it out and FactoryBot got installed.&lt;/p&gt;</content><author><name></name></author><category term="second" /><summary type="html">Today was hard holy cow. I started and finished working on user creation and authentication and boi was that hard.</summary></entry><entry><title type="html">Made It Even Better!</title><link href="http://localhost:4000/second/2018/06/12/heck-yeah-boi.html" rel="alternate" type="text/html" title="Made It Even Better!" /><published>2018-06-12T00:00:00-06:00</published><updated>2018-06-12T00:00:00-06:00</updated><id>http://localhost:4000/second/2018/06/12/heck-yeah-boi</id><content type="html" xml:base="http://localhost:4000/second/2018/06/12/heck-yeah-boi.html">&lt;p&gt;Yesterday after I posted the blog for June 11, I started experimenting with Active Storage for RoR. When I first started to dig into it all, it was hella confusing. I didn’t even know where to start. But thankfully I pushed through and this is what I did:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;
        &lt;p&gt;Created a free Google Cloud account&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;Created a project and a storage bucket for Haxxor News&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;Installed the Active Storage tables needed for Ruby on Rails to know what is currently being stored and where&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;Configured storage.yml to say that GCS is an usable storage location&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;Added &quot;has_attached&quot; to the Articles model to allow attachments to every article (Just one image)&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;p&gt;Launched the app locally and prayed that it worked....it did!&lt;/p&gt;
    &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So that was really fun. Another cool thing that I figured out how to do today was add a formatting toolbar to the textarea element when creating a new article. For your reference and my future reference for what I did, I first added a script tag in the head to import the .js code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--  @source https://cdn.ckeditor.com/#ckeditor5 
Add code to application.html.erb --&amp;gt;&lt;/span&gt;   
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.ckeditor.com/ckeditor5/10.0.1/classic/ckeditor.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then, when needed, I had to add a script that replaced the textarea element with their CKEditor5 replacement to add the formatting toolbar:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- The form is generated from rail's form_for form generator  --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text_area&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:body&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;textarea-field&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;',&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!--  @source https://cdn.ckeditor.com/#ckeditor5 
Add code wherever the formatting toolbar is desired --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ClassicEditor&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#editor'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;toolbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'heading'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'|'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bold'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'italic'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bulletedList'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'numberedList'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'link'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'blockQuote'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that’s it! Now you’ll be able to see a formatting toolbar on your textarea element. But something to note is that if you have specific styling for that textarea without the formatting toolbar, you will have to move that styling to apply to the new, replaced textarea element if that makes sense.&lt;/p&gt;

&lt;p&gt;On another note, I started doing testing for my Haxxor News application which is kinda neat. The capybara gem is flippin genius and I want to shake the hand of whoever created it.&lt;/p&gt;

&lt;p&gt;After all that’s been finished, I’ve been working on making sure that every feature I’ve added looks good or works properly. Now that I am close to finishing the current feature of active storage keeping, I am a little confused on whether or not I should move onto user authentication without finishing all the pull requests I’ve generated. I honestly don’t want to go through the hassle of rebasing or cherry-picking but if it has to be done, it has to be done.&lt;/p&gt;

&lt;p&gt;That’s all for today! I know this was long so if you made it to this point, congrats!&lt;/p&gt;</content><author><name></name></author><category term="second" /><summary type="html">Yesterday after I posted the blog for June 11, I started experimenting with Active Storage for RoR. When I first started to dig into it all, it was hella confusing. I didn’t even know where to start. But thankfully I pushed through and this is what I did:</summary></entry><entry><title type="html">Got A Lot Done!</title><link href="http://localhost:4000/second/2018/06/11/week1-dev-done.html" rel="alternate" type="text/html" title="Got A Lot Done!" /><published>2018-06-11T00:00:00-06:00</published><updated>2018-06-11T00:00:00-06:00</updated><id>http://localhost:4000/second/2018/06/11/week1-dev-done</id><content type="html" xml:base="http://localhost:4000/second/2018/06/11/week1-dev-done.html">&lt;p&gt;Ahh, today was pretty relaxed compared to last week. I didn’t have a crap-ton of meetings to go to which was nice. 
Today, I learned quite a bit more about Ruby on Rails and Heroku. When you migrate your database locally, apparently heroku does
not detect the changes. So you need to tell heroku to migrate the db on their server or something which is weird.&lt;/p&gt;

&lt;p&gt;Also, I made hella progress with Haxxor News. Eli assigned me the task to allow visitors to create a new article and view the most recently posted articles for the first week. I finished pretty much both of those tasks today which I’m pretty proud of. It was supposed to take a week but I got it done pretty fast. However, I’m not necessarily done. I want visitors to be able to add more content to their article rather than just a simple title and body. Maybe I’ll figure out how users can add images to the article and also some other stuff I need to figure out.&lt;/p&gt;

&lt;p&gt;In other news, I taught Eli how to play Fortnite lol:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/imgs/IMG_0318.jpg&quot; alt=&quot;Eli playing fortnite&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="second" /><summary type="html">Ahh, today was pretty relaxed compared to last week. I didn’t have a crap-ton of meetings to go to which was nice. Today, I learned quite a bit more about Ruby on Rails and Heroku. When you migrate your database locally, apparently heroku does not detect the changes. So you need to tell heroku to migrate the db on their server or something which is weird.</summary></entry><entry><title type="html">Started A New Project!</title><link href="http://localhost:4000/first/2018/06/08/finished-blog.html" rel="alternate" type="text/html" title="Started A New Project!" /><published>2018-06-08T00:00:00-06:00</published><updated>2018-06-08T00:00:00-06:00</updated><id>http://localhost:4000/first/2018/06/08/finished-blog</id><content type="html" xml:base="http://localhost:4000/first/2018/06/08/finished-blog.html">&lt;p&gt;Today I finished my blog in its entirety (if that’s spelled correctly). I’ve added a photo of myself to the about page to add some more pizzaz.&lt;/p&gt;

&lt;p&gt;Now, I have a new project. Yay!! I get to build a recreation of &lt;a href=&quot;http://news.ycombinator.com&quot;&gt; Hacker News&lt;/a&gt; which is pretty sweet. I started to work on deploying the app and getting the preliminary design of the home page finished.&lt;/p&gt;

&lt;p&gt;Whilst doing so, I learnt a couple things. First, Heroku is a PAIN IN THE ASS!!!!!! Just trying to deploy the app on Heroku took like an hour or so because I was getting so many errors. There is just so many things you have to configure before your app is working successfully on Heroku.&lt;/p&gt;

&lt;p&gt;Next, I learnt more things about Ruby on Rails. I figured out (with the help of Eli) that each HTML page is actually a template that is passed into the application.html.erb file. I also learned that in the application controller, you can write:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;some_method&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;helper_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:some_method&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and you can use the given method inside your view. That’s so cool!!&lt;/p&gt;

&lt;p&gt;Tomorrow, I am going to work on creating a model for the posts and allowing visitors to be able to create and view a list of the most recent posts.&lt;/p&gt;

&lt;p&gt;See ya tomorrow!!&lt;/p&gt;</content><author><name></name></author><category term="first" /><summary type="html">Today I finished my blog in its entirety (if that’s spelled correctly). I’ve added a photo of myself to the about page to add some more pizzaz.</summary></entry><entry><title type="html">My Blog Looks SWEET!</title><link href="http://localhost:4000/first/2018/06/07/damn-ir-looks-good.html" rel="alternate" type="text/html" title="My Blog Looks SWEET!" /><published>2018-06-07T00:00:00-06:00</published><updated>2018-06-07T00:00:00-06:00</updated><id>http://localhost:4000/first/2018/06/07/damn-ir-looks-good</id><content type="html" xml:base="http://localhost:4000/first/2018/06/07/damn-ir-looks-good.html">&lt;p&gt;Hey ya’ll I just finished my fourth day at Viget. It was quite an eventful day as I learnt a lot of things.&lt;/p&gt;

&lt;p&gt;First, I had a meeting with Peyton to discuss how I could better design my blog. He definitely gave me some great pointers which I’ve implemented. Now, the header is Viget blue and the footer is Viget orange. Everything is pretty much Viget.&lt;/p&gt;

&lt;p&gt;One thing he did recommend was putting the buttons that are currently on the home page. Despite that being a great idea, holy crap that was hard to implement. Javascript sucks (Sorry REACT devs) and it was pretty frustrating to figure everything out. However, it does seem I’ve got the basic functionality down. There is a weird thing that happens where once I press a button, the fade in and fade out isn’t necessarily smooth. I’m gonna have to ask Prayash about it tomorrow and see if we can fix anything. Also, my JS code is kinda messy so I’m going to also see if there is a way to clean it up.&lt;/p&gt;

&lt;p&gt;Otherwise, this concludes my blog post.&lt;/p&gt;</content><author><name></name></author><category term="first" /><summary type="html">Hey ya’ll I just finished my fourth day at Viget. It was quite an eventful day as I learnt a lot of things.</summary></entry><entry><title type="html">I figured it out.</title><link href="http://localhost:4000/first/2018/06/06/i-figured-it-out.html" rel="alternate" type="text/html" title="I figured it out." /><published>2018-06-06T00:00:00-06:00</published><updated>2018-06-06T00:00:00-06:00</updated><id>http://localhost:4000/first/2018/06/06/i-figured-it-out</id><content type="html" xml:base="http://localhost:4000/first/2018/06/06/i-figured-it-out.html">&lt;p&gt;Well, this is my third day at Viget and everything is going pretty well. Today I had a meeting at 8:30 AM for the Intro to Business Dev and that sucked. Not the content or the people in the meeting, just the fact that I had to pull myself out of bed at 6:00 AM to get to the meeting on time. I don’t really like waking up early because I’m a night owl and not a morning riser but sometimes you gotta do what’s expected of you. It’s all good.&lt;/p&gt;

&lt;p&gt;After playing around with Jekyll for a little while, I finally have the entire framework down. I know how to override the default layouts given by Jekyll and I figured out how the templating works. Jekyll uses Liquid templating which sounds dumb and horrible and the mathematical operations are absolutely wack. Instead of writing&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;you have to write&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modulo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Isn’t that dumb?&lt;/p&gt;

&lt;p&gt;Welp, that’s it for this post. Cya tomorrow.&lt;/p&gt;</content><author><name></name></author><category term="first" /><summary type="html">Well, this is my third day at Viget and everything is going pretty well. Today I had a meeting at 8:30 AM for the Intro to Business Dev and that sucked. Not the content or the people in the meeting, just the fact that I had to pull myself out of bed at 6:00 AM to get to the meeting on time. I don’t really like waking up early because I’m a night owl and not a morning riser but sometimes you gotta do what’s expected of you. It’s all good.</summary></entry><entry><title type="html">My Second Day at Viget!</title><link href="http://localhost:4000/first/2018/06/05/my-second-day.html" rel="alternate" type="text/html" title="My Second Day at Viget!" /><published>2018-06-05T00:00:00-06:00</published><updated>2018-06-05T00:00:00-06:00</updated><id>http://localhost:4000/first/2018/06/05/my-second-day</id><content type="html" xml:base="http://localhost:4000/first/2018/06/05/my-second-day.html">&lt;p&gt;Hey! This is my second day at Viget and it’s going really well so far. 
Today, I had a lot of meetings but it was quite fun. It was nice to be able to 
immerse myself in what a real-life office scenario would look like.&lt;/p&gt;

&lt;p&gt;Also, Eli gave me an assignment to create this blog so here it is lmao. Honestly, I was a little
afraid that I was not going to be able to understand how Jekyll works because I’ve never heard of it but
I think I got the hang of it. It’s kinda funky and not like an web framework that I’ve ever had to use.&lt;/p&gt;

&lt;p&gt;Right now, my blog looks pretty bland and I hope to be able to work with Peyton on making the design better
with his help in CSS styling. I would if I could but front-end is a pain in my butt and I really don’t want to tinker
with it for hours to make sure all my formatting is correct.&lt;/p&gt;</content><author><name></name></author><category term="first" /><summary type="html">Hey! This is my second day at Viget and it’s going really well so far. Today, I had a lot of meetings but it was quite fun. It was nice to be able to immerse myself in what a real-life office scenario would look like.</summary></entry></feed>