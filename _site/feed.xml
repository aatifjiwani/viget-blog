<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-08-03T15:55:08-06:00</updated><id>http://localhost:4000/</id><title type="html">Jiwani | Viget Blog 2018</title><subtitle>This is a blog created for my 2018 Viget Internship as their Rails Developer intern. </subtitle><entry><title type="html">IT’S DONE!</title><link href="http://localhost:4000/ninth/2018/08/03/its-done.html" rel="alternate" type="text/html" title="IT'S DONE!" /><published>2018-08-03T00:00:00-06:00</published><updated>2018-08-03T00:00:00-06:00</updated><id>http://localhost:4000/ninth/2018/08/03/its-done</id><content type="html" xml:base="http://localhost:4000/ninth/2018/08/03/its-done.html">&lt;p&gt;WE DID IT!!!!!!! Hoorrayyy!!!!!! This Or That has officially launched as part of the intern group project and I can proudly say, I’ve never been this hyped for an app launch. It’s really satisfying to see a whole 8 weeks worth of work coming together and allowing users to be able to have the world decide for them.&lt;/p&gt;

&lt;p&gt;In the morning when I came into work, things weren’t going how I planned. There were quite a few problems and I didn’t really know what the heck was going on! The app on Erica’s computer wasn’t loading, sometimes the pictures wouldn’t load, and the visitor voting feature wasn’t working properly in terms of the frontend. I first worked on the visitor voting bug and I realized that I forgot a &lt;code class=&quot;highlighter-rouge&quot;&gt;.option&lt;/code&gt; to the end of a conditional and that messed the whole thing up lmao. To address the others, I realized maybe it was a problem with the Javascript somewhere. I came to this conclusion because my experience with weird bugs while working on this project has been largely attributed to errors in JS. Peyton just recently added a massive 16,000 line JS file that made a wavy effect on the header. I wasn’t going to filter through 16,000 lines of code to find an error so we all agreed to remove this file and maybe add it on a later date. Thankfully, this fixed everything and our group project was officially finished! The presentation went really well and we started getting Viget people to go onto the site and interact with it.&lt;/p&gt;

&lt;p&gt;After FLF, I realized that it might be smart to add pagination because if the app loads all polls at once everytime, then the performance can become super slow if there are a crap ton of polls. I thought this would be pretty hard but I actually understood how to do everything! All I had to do was add the &lt;code class=&quot;highlighter-rouge&quot;&gt;will_paginate&lt;/code&gt; gem, add the pagination method to the ActiveRecord Association, and it would return a certain list of polls based on which page the user is on. Then, I had to add scripts to check if the user is at the bottom of the page in order to load the next “page” of polls. This was all pretty simple and I only ran into a few minor problems. One thing I realized after finishing this feature is that all the eventListeners and Voting JS code didn’t work properly on the newly generated polls. I realized that this was because my JS code adds event listeners to polls when the user first gets onto the site. Therefore, I had to learn about adding custom events and add custom event listeners to the elements I want it on. After a little session of JS refactoring, I got everything to work and now it’s on a PR. Hopefully, I’ll implement it by the end of the day!&lt;/p&gt;

&lt;p&gt;Next week is my last week as an intern here at Viget and I’m pretty bummed that I’m almost done. I really enjoyed working on this project and it has been an insane experience. I’m so proud of myself and the other interns I worked with. Without them, this app would not be as good as it is.&lt;/p&gt;</content><author><name></name></author><category term="ninth" /><summary type="html">WE DID IT!!!!!!! Hoorrayyy!!!!!! This Or That has officially launched as part of the intern group project and I can proudly say, I’ve never been this hyped for an app launch. It’s really satisfying to see a whole 8 weeks worth of work coming together and allowing users to be able to have the world decide for them.</summary></entry><entry><title type="html">I See The Finish Line</title><link href="http://localhost:4000/ninth/2018/08/02/i-see-finish-line.html" rel="alternate" type="text/html" title="I See The Finish Line" /><published>2018-08-02T00:00:00-06:00</published><updated>2018-08-02T00:00:00-06:00</updated><id>http://localhost:4000/ninth/2018/08/02/i-see-finish-line</id><content type="html" xml:base="http://localhost:4000/ninth/2018/08/02/i-see-finish-line.html">&lt;p&gt;We’re almost there!!! This is the last day we get to work on the intern group project before we present it in front of the entire company during FLF. There isn’t much to blog about besides the little tickets I worked on yesterday.&lt;/p&gt;

&lt;p&gt;One error that popped up was that AWS wasn’t connecting and it was like &lt;code class=&quot;highlighter-rouge&quot;&gt;cannot verify the request signature. please check your key and id&lt;/code&gt;. And I’m just super confused because there’s no way I edited the credentials and this error hasn’t been happening from the beginning because I’ve uploaded files before. So Pat and I went on a journey into AWS to figure this whole thing out. When we looked in the bucket, there was NOTHING THERE. It’s like someone went in, deleted everything, and revoked my access. But I don’t think anyone would do such a thing so it was pretty weird. However, Pat and I created a new AWS user for the organization and I got a new app key and access key. This did resolve some stuff because I was able to upload files but for some reason, there was a glitch and the images were not loading. So then, I talked to David B. and he helped me realize a silly mistake. Apparently, the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tags for the images were inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;erb&lt;/code&gt; conditional and that screwed everything up. Thankfully, that was an easy fix.&lt;/p&gt;

&lt;p&gt;The next major thing I worked on was that Safari didn’t want to submit a poll if the file field didn’t have a file attached. This so weird and honestly really dumb because everything worked fine on other browsers. So I decided to search it up and thankfully a lot of people had problems where Safari wasn’t sending an AJAX request if the file input fields didn’t have something attached to it. The solution was pretty easy to implement because someone out there created a script that allowed Safari to submit the form without files attached. THe solution, the script itself, is confusing and I don’t think I will ever understand what is going on.&lt;/p&gt;

&lt;p&gt;Tomorrow is the big day and I’m really hoping everything goes well and in our favor.&lt;/p&gt;</content><author><name></name></author><category term="ninth" /><summary type="html">We’re almost there!!! This is the last day we get to work on the intern group project before we present it in front of the entire company during FLF. There isn’t much to blog about besides the little tickets I worked on yesterday.</summary></entry><entry><title type="html">Almost Done!</title><link href="http://localhost:4000/ninth/2018/08/01/almost-done.html" rel="alternate" type="text/html" title="Almost Done!" /><published>2018-08-01T00:00:00-06:00</published><updated>2018-08-01T00:00:00-06:00</updated><id>http://localhost:4000/ninth/2018/08/01/almost-done</id><content type="html" xml:base="http://localhost:4000/ninth/2018/08/01/almost-done.html">&lt;p&gt;I know, I know, I’ve been lacking a little bit when it comes to blogging. BUT I have a pretty good reason. This week is the last week to work on the web app for the group project. Therefore, we literally have to finish and fix everything by thus upcoming Friday. On Monday, I was completely swarmed with new QA tickets that addressed random things that I didn’t even knew happened. On Tuesday, I worked from home because of the Playboi Carti concert but I still wasn’t able to finish everything.&lt;/p&gt;

&lt;p&gt;So today, I came into the office with the mentality that I have to finish almost everything today or I’m screwed. First, I started to address the problem where AWS was being super dumb. Apparently, the client key and secret app key were both invalid and for some reason, everything just dissapeared from my AWS S3 bucket. This was extremeley odd and Pat and I were trying to figure out the problem for so long. It wasn’t until David B. helped me out and realized the problem. The HTML and embedded ruby structure was messed up. All the HTML code was embedded within a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag which is clearly not what we want.&lt;/p&gt;

&lt;p&gt;After I fixed that issue, I started working on the feature where a user can see interim voting results of his/her own poll but also cannot vote on his/her own poll. This wasn’t too hard as I used the same logic for expired poll voting and just refactored it hella to fit this new feature.&lt;/p&gt;

&lt;p&gt;Finally, I started to work on the feature that visitors can vote on polls. At first, I didn’t really want to implement this because there would be hella tradeoffs and a lot of security vulnerability. However, this was a feature that was discussed at the beginning of the group project. So after listening to all the interns speak their opinions about this feature, I just sucked it up and implemented it. Honestly, this wasn’t really that difficult. It was just long. I had to create a new model (something I haven’t done in like a month), new controllers, new tests, and refactor existing code. In all, it took me about 2 hours and now I have a PR up. Eli already commented and approved it but I have some questions to ask him about how to better organize the code I just wrote.&lt;/p&gt;

&lt;p&gt;Welp, I finished today successfully. I think tomorrow will be a tad easier since there aren’t really many more tickets coming in.&lt;/p&gt;</content><author><name></name></author><category term="ninth" /><summary type="html">I know, I know, I’ve been lacking a little bit when it comes to blogging. BUT I have a pretty good reason. This week is the last week to work on the web app for the group project. Therefore, we literally have to finish and fix everything by thus upcoming Friday. On Monday, I was completely swarmed with new QA tickets that addressed random things that I didn’t even knew happened. On Tuesday, I worked from home because of the Playboi Carti concert but I still wasn’t able to finish everything.</summary></entry><entry><title type="html">More Voting and iOS</title><link href="http://localhost:4000/eighth/2018/07/26/ios-and-voting.html" rel="alternate" type="text/html" title="More Voting and iOS" /><published>2018-07-26T00:00:00-06:00</published><updated>2018-07-26T00:00:00-06:00</updated><id>http://localhost:4000/eighth/2018/07/26/ios-and-voting</id><content type="html" xml:base="http://localhost:4000/eighth/2018/07/26/ios-and-voting.html">&lt;p&gt;First off, sorry I haven’t made a blog update for the past two days. Tuesday I was pretty swamped and the same goes for Wednesday since I had the Boulder TTT (which, by the way, was awesome!!!!). Today, Peyton and I grinded on the web app, specifically on the voting feature. We both were trying to figure out how to properly display the percentage of votes. Not only when a user clicks on the poll for the first time, but also whether or not if the user has already voted. We needed to account for all these possibilities otherwise the user would be confused as to whether or not they have already voted on the poll or not. 
One thing I learned while helping Peyton out is that when you have the CSS: &lt;code class=&quot;highlighter-rouge&quot;&gt;last-child&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;first-child&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;nth-last-child(x)&lt;/code&gt;, the HTML will think any type of element within the parent is a child. So the &lt;code class=&quot;highlighter-rouge&quot;&gt;last-child&lt;/code&gt; etc. selectors can select a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag even though it’s not a real element that can be necessarily styled. So we had to come up with a kinda clever or hacky way to be able to account for that issue. We got that fixed though which is really good!&lt;/p&gt;

&lt;p&gt;Next, I worked on the iOS app. Specifically on making API calls so I can create or login a user. At first, I was having a lot of troubles because the parameters weren’t parsing properly. Instead of being &lt;code class=&quot;highlighter-rouge&quot;&gt;{ &quot;user&quot;: {&quot;username&quot;:...}, ....}&lt;/code&gt; like I want it, iOS for some reason was putting the expected hash inside of another empty hash like &lt;code class=&quot;highlighter-rouge&quot;&gt;\{\{ &quot;user&quot;: {&quot;username&quot;:...}, ....}}&lt;/code&gt;. Because of that, my API wasn’t able to read the parameters like I wanted it to. So then I tried looking it up and as it turns out, I needed to add the line: &lt;code class=&quot;highlighter-rouge&quot;&gt;request.setValue(&quot;application/json; charset=utf-8&quot;, forHTTPHeaderField: &quot;Content-Type&quot;)&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;NSMutableURLRequest&lt;/code&gt; object. When I got this issue figured out, I was able to easily complete user login and user signup.&lt;/p&gt;

&lt;p&gt;This is pretty much all I did today! See ya tomorrow!&lt;/p&gt;</content><author><name></name></author><category term="eighth" /><summary type="html">First off, sorry I haven’t made a blog update for the past two days. Tuesday I was pretty swamped and the same goes for Wednesday since I had the Boulder TTT (which, by the way, was awesome!!!!). Today, Peyton and I grinded on the web app, specifically on the voting feature. We both were trying to figure out how to properly display the percentage of votes. Not only when a user clicks on the poll for the first time, but also whether or not if the user has already voted. We needed to account for all these possibilities otherwise the user would be confused as to whether or not they have already voted on the poll or not. One thing I learned while helping Peyton out is that when you have the CSS: last-child, first-child, or nth-last-child(x), the HTML will think any type of element within the parent is a child. So the last-child etc. selectors can select a &amp;lt;script&amp;gt; tag even though it’s not a real element that can be necessarily styled. So we had to come up with a kinda clever or hacky way to be able to account for that issue. We got that fixed though which is really good!</summary></entry><entry><title type="html">Voting and APIs</title><link href="http://localhost:4000/eighth/2018/07/23/voting.html" rel="alternate" type="text/html" title="Voting and APIs" /><published>2018-07-23T00:00:00-06:00</published><updated>2018-07-23T00:00:00-06:00</updated><id>http://localhost:4000/eighth/2018/07/23/voting</id><content type="html" xml:base="http://localhost:4000/eighth/2018/07/23/voting.html">&lt;p&gt;Ahh today was pretty cool because I learned some things that I think are very crucial to app development. 
First, I worked on getting the Sign in modal to popup in the iOS app for the group project. Honestly that was pretty easy because it just consisted of copying the code from the Login view and refactoring it in order to fit the design. I didn’t really have much trouble with this.&lt;/p&gt;

&lt;p&gt;Then, I worked on the voting scheme for the web app. This was kinda hard because there were so many things to think about. I had to think about “What if the user is signed in? If not?” and “What if the user has already voted on this poll?”. These questions definitely came into play a lot because I had to return paths to the &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; action in the Vote controller if the user voted on a poll for the first time. I got the functionality working in about a couple hours and now I just have to wait for Peyton to be able to finish his part of taking the response and changing the frontend based on that.&lt;/p&gt;

&lt;p&gt;Finally, I worked on getting the API setup for the web app. In order for the mobile app to work properly, I need to communicate with a REST API from my app. Therefore, I learned a couple things.&lt;/p&gt;

&lt;p&gt;In order to make a &lt;code class=&quot;highlighter-rouge&quot;&gt;api/&lt;/code&gt; route, I had to do:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:api&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:polls&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#other stuff&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This would create a route like &lt;code class=&quot;highlighter-rouge&quot;&gt;BASE_DOMAIN/api/OTHER_CONTROLLER&lt;/code&gt;. Then, in order to setup the API controllers, I had to label the class name as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PollsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ApiController&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#do stuff here&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s pretty cool! That’s pretty much all I learned and did today. Tomorrow, I’m going to develop the APIs further so I can integrate it within the iOS app.&lt;/p&gt;</content><author><name></name></author><category term="eighth" /><summary type="html">Ahh today was pretty cool because I learned some things that I think are very crucial to app development. First, I worked on getting the Sign in modal to popup in the iOS app for the group project. Honestly that was pretty easy because it just consisted of copying the code from the Login view and refactoring it in order to fit the design. I didn’t really have much trouble with this.</summary></entry><entry><title type="html">More Work</title><link href="http://localhost:4000/seventh/2018/07/20/reset-password.html" rel="alternate" type="text/html" title="More Work" /><published>2018-07-20T00:00:00-06:00</published><updated>2018-07-20T00:00:00-06:00</updated><id>http://localhost:4000/seventh/2018/07/20/reset-password</id><content type="html" xml:base="http://localhost:4000/seventh/2018/07/20/reset-password.html">&lt;p&gt;Unlike yesterday where I only developed the iOS app for the group project, I actually did a lot of work in terms of the mobile and web app. For the mobile app, I’ve been making enormous strides. Today, I was able to adjust the launch screen to be seamless when the app laods as well as get the header in order. Also, I’ve been able to make it to where if you press the ‘Log in’ button, the Log in modal pops up in the middle of the screen. I know that doesn’t sound like a lot but it took so long to code everything. I know, I know, some people who might read this will say use storyboards. But if you checked out yesterday’s post, I already said I hate storyboards and I will never, ever, ever, ever use it again unless I really have to. In this case, I don’t have to so I won’t use storyboards.&lt;/p&gt;

&lt;p&gt;In terms of the Rails app, I ran into quite a few problems. Peyton implemented the Reset Password modal recently so now it is my turn to go in and do all the backend for that stuff. The first thing I realized was that I had to override the Passwords controller from Devise and I remember from overriding the Sessions and Registrations controller that that was a pain in the butt. Overriding the &lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt; action wasn’t too hard as it was pretty straightforward but the &lt;code class=&quot;highlighter-rouge&quot;&gt;create&lt;/code&gt; action was a whole new doozy. Devise has it so that when you create a reset password session, you get two tokens. One long one, and one short one. The long one is stored in the database and the short one is emailed to you so you don’t have to click a long link. But a weird thing is is that if you don’t have the right token, Devise STILL leads you to the password edit page which is not what we want. SO, I had to figure out how the heck Devise creates a reset password token and I have to check whether or not that token is in the DB. This took a while because I had to dig through parts of the gem to get the function I wanted. When I was able to, I finally made it so that the user had to use a proper link otherwise the session wouldn’t work.&lt;/p&gt;

&lt;p&gt;The next part that I struggled with was writing the tests. Devise doesn’t really keep track of the token and you can’t reproduce the token with the encryption functions they have. So I had to do some research and I came across a gem called &lt;code class=&quot;highlighter-rouge&quot;&gt;email-spec&lt;/code&gt;. This allows me to look at all the emails that have been sent an inspect their body. This wasn’t super hard to implement but one thing I realized is that Devise sends your email immediately, which takes the app a while to process. This isn’t good because RSpec doesn’t give a flying crap about long processes, it just executes the test as fast as possible. This isn’t good because my tests kept failing because it couldn’t find an email being sent but if it WAITED like a half second, it would see the pending email. So I have a hacky solution in place where you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep(inspection_time: ...)&lt;/code&gt; and it pauses the test for the specified time in seconds. I don’t know if this is the proper way to do this but it was a way I found that worked. I’ll just have to come in on Monday and see the comments on my PR.&lt;/p&gt;

&lt;p&gt;See ya Monday!!&lt;/p&gt;</content><author><name></name></author><category term="seventh" /><summary type="html">Unlike yesterday where I only developed the iOS app for the group project, I actually did a lot of work in terms of the mobile and web app. For the mobile app, I’ve been making enormous strides. Today, I was able to adjust the launch screen to be seamless when the app laods as well as get the header in order. Also, I’ve been able to make it to where if you press the ‘Log in’ button, the Log in modal pops up in the middle of the screen. I know that doesn’t sound like a lot but it took so long to code everything. I know, I know, some people who might read this will say use storyboards. But if you checked out yesterday’s post, I already said I hate storyboards and I will never, ever, ever, ever use it again unless I really have to. In this case, I don’t have to so I won’t use storyboards.</summary></entry><entry><title type="html">Real iOS Dev</title><link href="http://localhost:4000/seventh/2018/07/19/real-ios-dev.html" rel="alternate" type="text/html" title="Real iOS Dev" /><published>2018-07-19T00:00:00-06:00</published><updated>2018-07-19T00:00:00-06:00</updated><id>http://localhost:4000/seventh/2018/07/19/real-ios-dev</id><content type="html" xml:base="http://localhost:4000/seventh/2018/07/19/real-ios-dev.html">&lt;p&gt;Today pretty much consisted of doing one thing: iOS Development. At first, I was going to just try to complete the tutorial from Brian Voong on Let’s Build That App on YouTube but I realized something. After almost watching like 25 30-minute videos of just developing a fake app, I got kind of tired of listening to his voice. At this point, I really want to start developing an app that would be fun like the one for ThisOrThat, and so I did.&lt;/p&gt;

&lt;p&gt;In reality, I didn’t do much coding today. I was just really working on the branding and the launch screen of the app. I got the logos and the files I need from Julia so I went ahead and started to create the basic layout. One thing I learned is that there ARE A LOT, A LOT of different app icons you need to put into Xcode. Different meaning different sizes and it definitely was a hassle to keep exporting the same image over and over again at different sizes.&lt;/p&gt;

&lt;p&gt;Also, I learned that you can create the launch screen in a storyboard but you can’t create it programatically. I think Apple did this on purpose because the launch screen is just meant to be static and there isn’t supposed to be any form of functionality whatsoever. Another thing I learned was that STORYBOARDS SUCK!!!! They’re so confusing and constraints are so gosh darn hard to add. It’s not that making the layout in a storyboard is hard, it is just super confusing. There are so many buttons and windows that it really hurts my brain. This is why I’d rather stick to coding it because there are no buttons or extra windows, it’s just my code.&lt;/p&gt;

&lt;p&gt;That’s pretty much all I did today! See ya tomorrow!&lt;/p&gt;</content><author><name></name></author><category term="seventh" /><summary type="html">Today pretty much consisted of doing one thing: iOS Development. At first, I was going to just try to complete the tutorial from Brian Voong on Let’s Build That App on YouTube but I realized something. After almost watching like 25 30-minute videos of just developing a fake app, I got kind of tired of listening to his voice. At this point, I really want to start developing an app that would be fun like the one for ThisOrThat, and so I did.</summary></entry><entry><title type="html">Follows and Comments</title><link href="http://localhost:4000/seventh/2018/07/18/follow-comment.html" rel="alternate" type="text/html" title="Follows and Comments" /><published>2018-07-18T00:00:00-06:00</published><updated>2018-07-18T00:00:00-06:00</updated><id>http://localhost:4000/seventh/2018/07/18/follow-comment</id><content type="html" xml:base="http://localhost:4000/seventh/2018/07/18/follow-comment.html">&lt;p&gt;Today was pretty cool! I learned a couple new things while working on the group project!
First, I started to work on the comments feature and I’ll admit, it was pretty difficult at first. What happened was that Peyton didn’t have a form on his frontend template so I had to go in and add one. Then, I tried submitting the form with AJAX and for some reason it just was not working. I was using Javascript to submit the form and I had &lt;code class=&quot;highlighter-rouge&quot;&gt;remote: true&lt;/code&gt; set and the page was still refreshing. So then I looked up why and I saw that because I’m submitting the form with Javascript, the app isn’t sending an AJAX request to the backend. In order to do so, I needed to add some more code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#form'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//POST, PUT, DELETE, etc,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'action'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do stuff&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//do more stuff&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This script allows you to send an AJAX request to the backend!!
Then, after I finished the comments, I started to work on Follows. The one thing that I learned while working on that is that you can put multiple parameters into a path in order to match the exact route. That probably just made no sense so let me show you. Say you have a route &lt;code class=&quot;highlighter-rouge&quot;&gt;/articles/:article_id/follows/:id&lt;/code&gt;. You can specify an exact route with the exact IDs using &lt;code class=&quot;highlighter-rouge&quot;&gt;article_follows_path(@article, @follow)&lt;/code&gt;. This method constructs the entire route for you which is sweet!! After I figured that out, completing the feature wasn’t very hard.&lt;/p&gt;

&lt;p&gt;Well, tomorrow I’m probably going to add Follow specs and after that, we’ll see what I can work on.&lt;/p&gt;</content><author><name></name></author><category term="seventh" /><summary type="html">Today was pretty cool! I learned a couple new things while working on the group project! First, I started to work on the comments feature and I’ll admit, it was pretty difficult at first. What happened was that Peyton didn’t have a form on his frontend template so I had to go in and add one. Then, I tried submitting the form with AJAX and for some reason it just was not working. I was using Javascript to submit the form and I had remote: true set and the page was still refreshing. So then I looked up why and I saw that because I’m submitting the form with Javascript, the app isn’t sending an AJAX request to the backend. In order to do so, I needed to add some more code:</summary></entry><entry><title type="html">Wow I’m Dumb</title><link href="http://localhost:4000/seventh/2018/07/17/uneventful.html" rel="alternate" type="text/html" title="Wow I'm Dumb" /><published>2018-07-17T00:00:00-06:00</published><updated>2018-07-17T00:00:00-06:00</updated><id>http://localhost:4000/seventh/2018/07/17/uneventful</id><content type="html" xml:base="http://localhost:4000/seventh/2018/07/17/uneventful.html">&lt;p&gt;Today was pretty uneventful. There wasn’t enough FED stuff done for me to go in and do my backend stuff. So today all I did was iOS development. YAY!!!!!!!! Except I’ve been doing the same tutorial for like a week and a half now and honestly I’m kinda getting bored by listening to that guy just ramble on and me trying to follow along.&lt;/p&gt;

&lt;p&gt;There wasn’t much that I learned either besides what an &lt;code class=&quot;highlighter-rouge&quot;&gt;inputAccessoryView&lt;/code&gt; is and how to build it.&lt;/p&gt;

&lt;p&gt;However, I did get caught on one thing. Last week, I was struggling because for some reason, the tap gestures on my images wouldn’t work. I don’t know why they didn’t work but for some reason they just didn’t. Today, I came across the same gosh darn problem. I tried all the ways to fix my problem by refactoring the code, moving definitions elsewhere, etc. It just wasn’t working. So, I decided to give up and finally create an account on Stack Overflow and ask the question. Here is the link if you want it. &lt;a href=&quot;https://stackoverflow.com/questions/51391053/uiimageview-tap-gesture-not-recognizing-user-interaction-is-enabled&quot;&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Surprisingly, somebody answered within like 5 minutes and solved my problem. And the solution really made me look stupid. Instead of setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; of the gesture to &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; like it’s supposed to be, I accidentally set it to &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;. What kinda ticks me off the most is how I never caught that error. I was literally staring at my code for like 10 minutes and still didn’t realize it until I used Stack Overflow.&lt;/p&gt;

&lt;p&gt;Well that’s it today. Tomorrow imma work on the group project more.&lt;/p&gt;</content><author><name></name></author><category term="seventh" /><summary type="html">Today was pretty uneventful. There wasn’t enough FED stuff done for me to go in and do my backend stuff. So today all I did was iOS development. YAY!!!!!!!! Except I’ve been doing the same tutorial for like a week and a half now and honestly I’m kinda getting bored by listening to that guy just ramble on and me trying to follow along.</summary></entry><entry><title type="html">Group Project Day</title><link href="http://localhost:4000/seventh/2018/07/16/no-ios.html" rel="alternate" type="text/html" title="Group Project Day" /><published>2018-07-16T00:00:00-06:00</published><updated>2018-07-16T00:00:00-06:00</updated><id>http://localhost:4000/seventh/2018/07/16/no-ios</id><content type="html" xml:base="http://localhost:4000/seventh/2018/07/16/no-ios.html">&lt;p&gt;Today was very unsatisfying in some ways. I came in this morning thinking I would be able to finish handling the Create Poll form in a couple hours but it ended up taking the ENTIRE DAY!!!! I didn’t really mind working on the group project all day because in the end, that’s pretty much my job here as an intern and I love to code. But I lowkey was looking forward to be able to continue with the Chat App tutorial so I could finally start working on making the mobile app for the group project.&lt;/p&gt;

&lt;p&gt;One thing that I did learn when working on this specific feature is to attach a status code to your JSON response back to the browser. For instance, if a user didn’t put the information properly, I responded back with a:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;status: :unprocessable_entity&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I think that’s a 522 status error code and you can replace that status line with any error type you want. This then allows me to bind an ajax error handler to the specific element like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;poll-form&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ajax:error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;whatever&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So yeah that’s it. Otherwise, the PR is up and ready to be revieeeewwweeeeeeeeeeeeddddddddddddddddd. See ya tomorrow.&lt;/p&gt;</content><author><name></name></author><category term="seventh" /><summary type="html">Today was very unsatisfying in some ways. I came in this morning thinking I would be able to finish handling the Create Poll form in a couple hours but it ended up taking the ENTIRE DAY!!!! I didn’t really mind working on the group project all day because in the end, that’s pretty much my job here as an intern and I love to code. But I lowkey was looking forward to be able to continue with the Chat App tutorial so I could finally start working on making the mobile app for the group project.</summary></entry></feed>